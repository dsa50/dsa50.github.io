{
  "data": {
    "lesson": {
      "id": 824850,
      "key": "d908710f-364f-4c91-abfa-3f598696df7e",
      "title": "Python Refresher",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "A quick refresh on Python basics! ",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/d908710f-364f-4c91-abfa-3f598696df7e/824850/1556058670084/Python+Refresher+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/d908710f-364f-4c91-abfa-3f598696df7e/824850/1556058668063/Python+Refresher+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 825834,
          "key": "c2ee5708-95fb-479d-b374-f37bfd1e37b5",
          "title": "Prepared for Programming",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c2ee5708-95fb-479d-b374-f37bfd1e37b5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 831095,
              "key": "25d8ad51-e92c-476f-9d2b-46322c58e9dd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "  ",
              "instructor_notes": ""
            },
            {
              "id": 825836,
              "key": "9f58cddd-a7c9-4621-a2b9-0f8c1d9340b5",
              "title": "Sintaxe",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "08M93RaBSgU",
                "china_cdn_id": "08M93RaBSgU.mp4"
              }
            },
            {
              "id": 825837,
              "key": "1d2ca762-3e3f-4878-91f0-dafe77a408a3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The data structures and algorithms you learn in this program can be implemented in any number of different languages. For that reason, when we discuss these concepts in videos, we'll explain them in general terms and demonstrate them using [pseudocode](https://en.wikipedia.org/wiki/Pseudocode).\n\nHowever, it's also essential to get lots of practice applying the algorithms for yourself, so we'll provide exercises and projects where you can implement the algorithms using concrete code. \n\nThe language we'll be using for these exercises is **Python 3**. It will help you a lot if you take the time now to make sure your understanding of fundamental Python is strong. In this section, we'll briefly review some of the main concepts you should know. This will help you see if you have areas where you need to do some additional review or practice.\n\nAt the bottom of the main menu for this Nanodegree, you'll find an *Extracurricular* section. This contains our full [Introduction to Python](https://classroom.udacity.com/nanodegrees/nd256/parts/3e0736c8-22b4-4fca-83de-4250391bc9d1) course. If you feel uncomfortable with any of the concepts we review in this brief refresher, feel free to use the full Python course to go deeper.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 825934,
          "key": "80258ec4-ffc8-42ae-9f29-e8cf1bfa854e",
          "title": "Control Structures",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "80258ec4-ffc8-42ae-9f29-e8cf1bfa854e",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 825935,
              "key": "b022affd-9605-4481-b05c-caeeb38d94b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Control Structures Review",
              "instructor_notes": ""
            },
            {
              "id": 825936,
              "key": "ce6409a8-25ae-4f1c-97c2-b854af7d54df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Iteration with Loops\n\nTo iterate in Python, there are several options. A `for` loop can be used to iterate through a list or dictionary. Instead of the traditional `for` loop where we initialize a value `i` and increase / decrease it till it reaches an end value, Python's `for` loops are `for-each` in nature. This means that when you are iterating using a `for loop` over a list, you actually iterate over the items of that list. \n\nIf you also need the index values from the list while iterating, another possibility is to use `enumerate`, which is shown in an example below.\n\nAn additional way to iterate in Python is with a `while` loop. Just as in other programming languages, the `while` loop will repeat while some conditional statement is true. You will see more on conditional statements shortly, but first, here are examples of iteration with `for` and `while` loops.",
              "instructor_notes": ""
            },
            {
              "id": 825937,
              "key": "6c801c9f-bf47-4296-80dc-eae8fd841d24",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```Python\n# Examples of iteration with for loops.\n\nmy_list = [0, 1, 2, 3, 4, 5]\n\n# Print each value in my_list. Note you can use the \"in\" keyword to iterate over a list.\nfor item in my_list:\n    print('The value of item is: ' + str(item))\n\n# Print each index and value pair.\nfor i, value in enumerate(my_list):\n    print('The index value is: ' + str(i) + '. The value at i is: ' + str(value))\n\n# Print each number from 0 to 9 using a while loop.\ni = 0\nwhile(i < 10):\n    print(i)\n    i += 1\n\n# Print each key and dictionary value. Note that you can use the \"in\" keyword \n# to iterate over dictionary keys.\nmy_dict = {'a': 'jill', 'b': 'tom', 'c': 'tim'}\nfor key in my_dict:\n    print(key + ', ' + my_dict[key])\n```\nRemember that Python requires correct indentation for code blocks to be interpreted correctly. Indentation for a block is usually four spaces, or one tab length.",
              "instructor_notes": ""
            },
            {
              "id": 825938,
              "key": "530aeb0b-e9ca-4853-91ba-ea66386b298c",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "530aeb0b-e9ca-4853-91ba-ea66386b298c",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What would be the output of the following code?\n```\nmy_dict = {'a':[0, 1, 2, 3], 'b':[0, 1, 2, 3], 'c':[0, 1, 2, 3], 'd':[0, 1, 2, 3]}\ni = 0\noutput = []\nfor key in my_dict:\n    output.append(my_dict[key][i])\n    i += 1\nprint(output)\n```",
                "answers": [
                  {
                    "id": "a1550179061054",
                    "text": "[0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3]",
                    "is_correct": false
                  },
                  {
                    "id": "a1550179066869",
                    "text": "['a', 'b', 'c', 'd']",
                    "is_correct": false
                  },
                  {
                    "id": "a1550179067348",
                    "text": "[0, 1, 2, 3]",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 825939,
              "key": "4e40006b-0572-4169-83fc-1961043074fc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Conditional Statements\n\nConditional statements use boolean logic to help guide our decision process: the statement is true or false. These statements are structured using comparison operators: greater than (`>`), less than (`<`), and equal to (`==`).\n\nUsing conditional statements for control flow is accomplished in Python with the keywords: `if`, `else`, and `elif`. When doing multiple comparisons in Python, one after the other, the first comparison always uses`if` and the last comparison generally uses `else`. If additional control flow is needed, `elif` statements can be used; `elif` stands for \"else if\". \n```Python\nnum = 5\nif num < 5:\n    print('The number is smaller than 5.')\nelif num == 5:\n    print('The number equals 5.')\nelse:\n    print('The number is greater than 5.')\n```\nThe code above would print: `The number equals 5.`",
              "instructor_notes": ""
            },
            {
              "id": 825940,
              "key": "03ca5860-5b1b-46ed-a80f-53b79cdf2648",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Control Structure Practice\n\nIn the following exercise you will finish writing `smallest_positive` which is a function that finds the smallest positive number in a list.\n\n## Exercise 1",
              "instructor_notes": ""
            },
            {
              "id": 825941,
              "key": "633e4018-aa6a-4928-b3de-f2d80a4f6457",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "633e4018-aa6a-4928-b3de-f2d80a4f6457",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6512454697353216",
                "initial_code_files": [
                  {
                    "text": "def smallest_positive(in_list):\n    # TODO: Define a control structure that finds the smallest positive\n    # number in in_list and returns the correct smallest number.\n    \n    return 0\n\n# Test cases\n\nprint(smallest_positive([4, -6, 7, 2, -4, 10]))\n# Correct output: 2\n\nprint(smallest_positive([.2, 5, 3, -.1, 7, 7, 6]))\n# Correct output: 0.2\n\nprint(smallest_positive([-6, -9, -7]))\n# Correct output: None\n\nprint(smallest_positive([]))\n# Correct output: None",
                    "name": "data.py"
                  },
                  {
                    "text": "def smallest_positive(in_list):\n    # TODO: Define a control structure that finds the smallest positive\n    # number in in_list and returns the correct smallest number.\n    smallest_pos = None\n    for num in in_list:\n        if num > 0:\n            # Note: we use a logical \"or\" in this solution to form \n            # the conditional statement, although this was\n            # not introduced above. \n            if smallest_pos == None or num < smallest_pos:\n                smallest_pos = num\n    return smallest_pos\n\n# Test cases\n\nprint(smallest_positive([4, -6, 7, 2, -4, 10]))\n# Correct output: 2\n\nprint(smallest_positive([.2, 5, 3, -.1, 7, 7, 6]))\n# Correct output: 0.2\n\nprint(smallest_positive([-6, -9, -7]))\n# Correct output: None\n\nprint(smallest_positive([]))\n# Correct output: None",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 825943,
              "key": "aa8960be-a8fa-4de2-b111-bbdd356dfc90",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise 2\n\nNow let's assume you are planning on taking some additional courses at your local educational institution, and you have acquired some data about the available courses and when they will be offered. In the following exercise, you will write control structures to process the data and return the semesters when a given course is offered.\n\nYou will need to complete the function `when_offered(courses, course)`. This function accepts a \"courses\" data structure and a \"course\" string. The function should return a list of strings representing the semesters when the input course is offered. See the two test cases below for examples of correct results.\n\nSince the `when_offered` function accepts a dictionary data structure, you will find the\n```Python\nfor <key> in <dictionary>:                  \n    <block>\n```\nconstruct useful, as this loops through the key values in a dictionary.",
              "instructor_notes": ""
            },
            {
              "id": 825944,
              "key": "035b7943-1f8b-49f1-84ff-48b480fca58b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "035b7943-1f8b-49f1-84ff-48b480fca58b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6300672946995200",
                "initial_code_files": [
                  {
                    "text": "# This exercise uses a data structure that stores Udacity course information.\n# The data structure format is:\n\n#    { <semester>: { <class>: { <property>: <value>, ... },\n#                                     ... },\n#      ... }\n\n\ncourses = {\n    'spring2020': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Peter C.'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian',\n                           'assistant': 'Andy'}},\n    'fall2020': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Sarah'},\n                 'cs212': {'name': 'The Design of Computer Programs',\n                           'teacher': 'Peter N.',\n                           'assistant': 'Andy',\n                           'prereq': 'cs101'},\n                 'cs253': {'name': 'Web Application Engineering - Building a Blog',\n                           'teacher': 'Steve',\n                           'prereq': 'cs101'},\n                 'cs262': {'name': 'Programming Languages - Building a Web Browser',\n                           'teacher': 'Wes',\n                           'assistant': 'Peter C.',\n                           'prereq': 'cs101'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian'},\n                 'cs387': {'name': 'Applied Cryptography',\n                           'teacher': 'Dave'}},\n    'spring2044': { 'cs001': {'name': 'Building a Quantum Holodeck',\n                           'teacher': 'Dorina'},\n                        'cs003': {'name': 'Programming a Robotic Robotics Teacher',\n                           'teacher': 'Jasper'},\n                     }\n    }\n\n\ndef when_offered(courses, course):\n    # TODO: Fill out the function here.\n    \n    # TODO: Return list of semesters here.\n    return None\n\n\n\nprint(when_offered(courses, 'cs101'))\n# Correct result: \n# ['fall2020', 'spring2020']\n\nprint(when_offered(courses, 'bio893'))\n# Correct result: \n# []\n",
                    "name": "data.py"
                  },
                  {
                    "text": "# This exercise uses a data structure that stores Udacity course information.\n# The data structure format is:\n\n#    { <semester>: { <class>: { <property>: <value>, ... },\n#                                     ... },\n#      ... }\n\n\ncourses = {\n    'spring2020': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Peter C.'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian',\n                           'assistant': 'Andy'}},\n    'fall2020': { 'cs101': {'name': 'Building a Search Engine',\n                           'teacher': 'Dave',\n                           'assistant': 'Sarah'},\n                 'cs212': {'name': 'The Design of Computer Programs',\n                           'teacher': 'Peter N.',\n                           'assistant': 'Andy',\n                           'prereq': 'cs101'},\n                 'cs253': {'name': 'Web Application Engineering - Building a Blog',\n                           'teacher': 'Steve',\n                           'prereq': 'cs101'},\n                 'cs262': {'name': 'Programming Languages - Building a Web Browser',\n                           'teacher': 'Wes',\n                           'assistant': 'Peter C.',\n                           'prereq': 'cs101'},\n                 'cs373': {'name': 'Programming a Robotic Car',\n                           'teacher': 'Sebastian'},\n                 'cs387': {'name': 'Applied Cryptography',\n                           'teacher': 'Dave'}},\n    'spring2044': { 'cs001': {'name': 'Building a Quantum Holodeck',\n                           'teacher': 'Dorina'},\n                        'cs003': {'name': 'Programming a Robotic Robotics Teacher',\n                           'teacher': 'Jasper'},\n                     }\n    }\n\n# In this exercise, you will need to complete the function \n# when_offered(courses, course). This function accepts a \"courses\" \n# data structure and a \"course\" string. \n# The function should return a list of strings representing the semesters \n# when the input course is offered. See the two test cases below for examples \n# of correct results.\n\n\ndef when_offered(courses, course):\n    # TODO: Fill out the function here.\n    semesters = []\n    for semester in courses:\n        if course in courses[semester]:\n            semesters.append(semester)\n    # TODO: Return list of semesters here.\n    return semesters\n\n\n\nprint(when_offered(courses, 'cs101'))\n# Correct result: \n# ['fall2020', 'spring2020']\n\nprint(when_offered(courses, 'bio893'))\n# Correct result: \n# []\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 825946,
          "key": "35ab8488-ecbf-4315-a37a-82be02e2b740",
          "title": "Functions & Generators",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "35ab8488-ecbf-4315-a37a-82be02e2b740",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 825947,
              "key": "01362178-c038-48c3-816c-bb1006102ee4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Function and Generator Review",
              "instructor_notes": ""
            },
            {
              "id": 825948,
              "key": "3da63000-b229-4630-b0e7-1bd640feb148",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python Functions\n\nIn the previous exercises, you worked with examples of Python functions. If you haven't written one from scratch in a while, writing a function in Python involves a function declaration `def` that takes one or more values, and a `return` that returns one or more values. Unlike some other languages, in Python you are not required to specify the data-type of the value your function is going to return. \n\n**Note**: In Python every function returns a value. In case you do not specify a return value explicitly, Python will return `None` from that function.",
              "instructor_notes": ""
            },
            {
              "id": 825949,
              "key": "fd7e9277-695d-44b7-8b58-1a9c037df3e3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\n# Example function 1: return the sum of two numbers.\ndef sum(a, b):\n    return a+b\n    \n# Example function 2: return the size of list, and modify the list to now be sorted.\ndef list_sort(my_list):\n    my_list.sort()\n    return len(my_list),  my_list\n```",
              "instructor_notes": ""
            },
            {
              "id": 825950,
              "key": "bb8c680a-7709-4e31-b5b0-4c0ae4058027",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Python Generators\n\nA generator in Python is similar to a function except instead of returning a value and exiting a process, a generator will pause the process, saving its state for next time. The biggest difference between a function and generator from a code perspective is one word: `return` is changed to `yield`.\n\nA generator becomes very useful when dealing with very large collections of data that you don’t want to store in memory all at once. It’s also very useful for dealing with extremely large or even infinite series. \n\nBelow is an example of how to use a generator to print even numbers. Printing all even numbers at once would take an infinite amount of time, but the generator allows the process to pause, and go back to creating even numbers when needed. \n\nTo create the next successive even number simply call `next()` on the generator object, and it will yield the next iteration. After `yield` is called, everything in the state of the generator function freezes, and the value is returned. When the generator is called again with `next()`, it picks back up right where it stopped at `yield` from before.",
              "instructor_notes": ""
            },
            {
              "id": 825951,
              "key": "2c4ab56b-dc05-4d1d-a868-eb0f36345b4f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```Python\n# Definition of the generator to produce even numbers.\ndef all_even():\n    n = 0\n    while True:\n        yield n\n        n += 2\n\nmy_gen = all_even()\n\n# Generate the first 5 even numbers.\nfor i in range(5):\n    print(next(my_gen))\n\n# Now go and do some other processing.\ndo_something = 4\ndo_something += 3\nprint(do_something)\n\n# Now go back to generating more even numbers.\nfor i in range(100):\n    print(next(my_gen))\n```\nThe example above is showing the advantage of using a generator to be able to pause the process and be able to do other things.",
              "instructor_notes": ""
            },
            {
              "id": 825952,
              "key": "472c8932-8bb5-436d-a937-9aa6b2b20a50",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Function and Generator Practice\n\n## Exercise 1\n\nIn the following exercise, you will create a generator `fact_gen()` that generates factorials. For a number n, n factorial is denoted by n!, and it is the product of all positive integers less than or equal to n. For example, \n>5! = 5 \\* 4 \\* 3 \\* 2 \\* 1 = 120\n\nIn this exercise, you will define `prod(a, b)` which returns the product of numbers a and b. You will also define `fact_gen()` which yields the next factorial number.",
              "instructor_notes": ""
            },
            {
              "id": 825953,
              "key": "8c973608-19c7-40aa-acb4-29a7fa6cabcb",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "8c973608-19c7-40aa-acb4-29a7fa6cabcb",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5131405992001536",
                "initial_code_files": [
                  {
                    "text": "def prod(a,b):\r\n    # TODO change output to the product of a and b\r\n    output = 0\r\n    return output\r\n\r\ndef fact_gen():\r\n    i = 1\r\n    n = i\r\n    while True:\r\n        output = prod(n, i)\r\n        yield output\r\n        # TODO: update i and n\r\n        # Hint: i is a successive integer and n is the previous product\r\n\r\n\r\n# Test block\r\nmy_gen = fact_gen()\r\nnum = 5\r\nfor i in range(num):\r\n    print(next(my_gen))\r\n\r\n# Correct result when num = 5:\r\n# 1\r\n# 2\r\n# 6\r\n# 24\r\n# 120\r\n\r\n\r\n",
                    "name": "data.py"
                  },
                  {
                    "text": "def prod(a,b):\r\n    # TODO change output to the product of a and b\r\n    return a*b\r\n\r\ndef fact_gen():\r\n    i = 1\r\n    n = i\r\n    while True:\r\n        output = prod(n, i)\r\n        yield output\r\n        # TODO: update i and n\r\n        # Hint: i is a successive integer and n is the previous product\r\n        i += 1\r\n        n = output\r\n\r\n\r\n# Test block\r\nmy_gen = fact_gen()\r\nnum = 5\r\nfor i in range(num):\r\n    print(next(my_gen))\r\n\r\n# Correct result when num = 5:\r\n# 1\r\n# 2\r\n# 6\r\n# 24\r\n# 120",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 825954,
              "key": "7ea5b855-f02e-4ed3-8218-562a2035a2bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise 2\n\nIn the next exercise, you will write a function that checks sudoku squares for correctness.\n\nSudoku is a logic puzzle where a game is defined by a partially filled 9 x 9 square of digits where each square contains one of the digits 1, 2, 3, 4, 5, 6, 7, 8, 9. For this question we will generalize and simplify the game.\n\nDefine a procedure, `check_sudoku`, that takes as input a square list of lists representing an n x n sudoku puzzle solution and returns the boolean True if the input is a valid sudoku square and returns the boolean False otherwise.\n\nA valid sudoku square satisfies these two properties:\n\n  1. Each column of the square contains each of the whole numbers from 1 to n exactly once.\n\n  2. Each row of the square contains each of the whole numbers from 1 to n exactly once.\n\nYou may assume that the input is square and contains at least one row and column.",
              "instructor_notes": ""
            },
            {
              "id": 825955,
              "key": "221eeea2-6758-4820-a4bc-d3a587515b8b",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "221eeea2-6758-4820-a4bc-d3a587515b8b",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5376451215491072",
                "initial_code_files": [
                  {
                    "text": "correct = [[1,2,3],\n           [2,3,1],\n           [3,1,2]]\n\nincorrect = [[1,2,3,4],\n             [2,3,1,3],\n             [3,1,2,3],\n             [4,4,4,4]]\n\nincorrect2 = [[1,2,3,4],\n             [2,3,1,4],\n             [4,1,2,3],\n             [3,4,1,2]]\n\nincorrect3 = [[1,2,3,4,5],\n              [2,3,1,5,6],\n              [4,5,2,1,3],\n              [3,4,5,2,1],\n              [5,6,4,3,2]]\n\nincorrect4 = [['a','b','c'],\n              ['b','c','a'],\n              ['c','a','b']]\n\nincorrect5 = [ [1, 1.5],\n               [1.5, 1]]\n               \n# Define a function check_sudoku() here:\n\n\n\n\n    \n    \n#print(check_sudoku(incorrect))\n#>>> False\n\n#print(check_sudoku(correct))\n#>>> True\n\n#print(check_sudoku(incorrect2))\n#>>> False\n\n#print(check_sudoku(incorrect3))\n#>>> False\n\n#print(check_sudoku(incorrect4))\n#>>> False\n\n#print(check_sudoku(incorrect5))\n#>>> False\n\n\n",
                    "name": "sudoku.py"
                  },
                  {
                    "text": "# An example solution for the check_sudoku() function\n\ndef check_sudoku(square):\n    for row in square:\n        # Create a list with the integers 1, 2, ..., n.\n        # We will check that each number in the row is in the list\n        # and remove the numbers from the list once they are verified\n        # to ensure that each number only occurs once in the row.\n        check_list = list(range(1, len(square[0]) + 1))\n        for i in row:\n            if i not in check_list:\n                return False\n            check_list.remove(i)\n    for n in range(len(square[0])):\n        # We do the same here for each column in the square.\n        check_list = list(range(1, len(square[0]) + 1))\n        for row in square:\n            if row[n] not in check_list:\n                return False\n            check_list.remove(row[n])\n    return True",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 837948,
          "key": "9d117d6b-8e36-462d-9fad-47cdeb577876",
          "title": "Classes",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "9d117d6b-8e36-462d-9fad-47cdeb577876",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 837949,
              "key": "479941f9-cbcd-48e1-be13-da0775386001",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Python Classes Review",
              "instructor_notes": ""
            },
            {
              "id": 837950,
              "key": "3737b866-a8b6-4c44-95f0-0307a4356bc9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\n## Python Classes Overview\n\nA class is a structure in object-oriented programming that allows functions and related data to be grouped together.\n\nIn a Python class, an important concept is `self`, which is used to reference a class instance's own variables and functions from within the class definition. For example, if we had a class called `Person` and we wanted the class instances to have a variable called `age`, we could store this information by using `self.age`.\n\n Also, if we wanted the class to have a function that would increment the age of the person, we could define a function inside this class called `def birthday(self)`. In order to be a class function, `birthday` needs to include the input variable `self`, as this is used for proper referencing within the class.\n\nAnother important and commonly used function definition is the class initializer, `def __init__(self)`. The body of the initializer is where instance variable definitions should be added, and the initializer initializes all the variables once an instance of the class is created. Also, any input variables that a class needs to have, such as a name for the person can be passed into initializer function. ",
              "instructor_notes": ""
            },
            {
              "id": 837951,
              "key": "7a8420a7-8c7a-4036-9f50-44a9ce85ed91",
              "title": "",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7a8420a7-8c7a-4036-9f50-44a9ce85ed91",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Which of the following is a correct statement about using `self` in Python?",
                "answers": [
                  {
                    "id": "a1552325081610",
                    "text": "`self` is not necessary in Python, and is only included for clarity when writing code.",
                    "is_correct": false
                  },
                  {
                    "id": "a1552325113685",
                    "text": "`self` must be used when declaring a variable in an `__init__` function so that each instance of the class has its own copy of that variable.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 837952,
              "key": "aebe1be0-79e7-46a6-a367-d5feee3df75a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Examples of Python Classes\n\nBelow is an example of a basic Person class. The class has two variables for name and age, along with three functions for initializing the class, incrementing the person’s age, and getting the person’s name.\n```Python\nclass Person:\n    def __init__(self, name, age):\n        self.person_name = name\n        self.person_age = age\n\n    def birthday(self):\n        self.person_age += 1\n\n    def getName(self):\n        return self.person_name\n```",
              "instructor_notes": ""
            },
            {
              "id": 837953,
              "key": "99c67369-975b-498f-ad29-47e57a1e217b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Let’s look at an example for how to create an instance of the `Person` class using the class template above. We can then access that `Person`’s name:\n\n```Python\nbob = Person('Bob', 32)\nprint(bob.getName())\n# prints Bob\n```\n\nCurrently, we have one function for getting the class’s variable. This is called an Accessor. The other function that the class has is actually modifying one of the class’ variables, and that is called a Mutator. We can make our `Person` older by calling `birthday()`\n\n```Python\nbob.birthday()\nprint(bob.person_age)\n# prints 33\n```\n\nThe birthday function call successfully increments the age of our `Person`. Also note that we can directly get the age of bob without using a function call. This is because the `Person` class variables are defined as public, so we can directly access them without a function call. If instead we wanted the `Person`’s age variable to be private to the class, in Python 3 we could put double underscores in front of the variable: `__person_age`. Then we would have to use a function call in order to retrieve it.",
              "instructor_notes": ""
            },
            {
              "id": 837954,
              "key": "479d8ab5-21eb-45fd-ba0a-d3633a66e349",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Python Class Practice",
              "instructor_notes": ""
            },
            {
              "id": 837955,
              "key": "65b9fd2e-908a-49e1-9291-8cd5084634d9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Exercise 1\n\nNow let's assume that the current month is April, and you want to use a `Person` class to help make use of information about the friends in your contacts list. In particular, you'd like to increment the age of all of your friends with birthdays in April. You would also like to know who they are, along with their current ages, so you can send them birthday cards. Finally, you would also like to figure out which month has the most friends with birthdays, so you can budget for all of the birthday cards you will need to buy.\n\nIn the following exercise, the `Person` class will be provided for you, and you will be working with a list of instances of the class, representing friends in your contacts. This list is stored in the variable `people`.\n\nTo complete the exercise, you will need to do two things:\n1. Complete the function `get_april_birthdays(people)`.  This function should return a dictionary with each name of your friend with an April birthday as a key, and their updated age as the value.\n2. Complete the function `get_most_common_month(people)`. This function should return the name of the month with the most number of birthdays among your friends.\n\nThere is some testing code provided in `test()`, and there are more specific TODO instructions in each of the two functions mentioned.",
              "instructor_notes": ""
            },
            {
              "id": 837956,
              "key": "ecc16cda-f5b5-4c62-ad8b-b4b48288ddf4",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "ecc16cda-f5b5-4c62-ad8b-b4b48288ddf4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4618962410799104",
                "initial_code_files": [
                  {
                    "text": "class Person:\n    def __init__(self, name, age, month):\n        self.name = name\n        self.age = age\n        self.birthday_month = month\n        \n    def birthday(self):\n        self.age += 1\n\ndef create_person_objects(names, ages, months):\n    my_data = zip(names, ages, months)\n    person_objects = []\n    for item in my_data:\n        person_objects.append(Person(*item))\n    return person_objects\n\ndef get_april_birthdays(people):\n    # TODO:\n    # Increment \"age\" for all people with birthdays in April.\n    # Return a dictionary \"april_birthdays\" with the names of\n    # all people with April birthdays as keys, and their updated ages \n    # as values. See the test below for an example expected output.\n    april_birthdays = {}\n\n    \n    # TODO: Modify the return statement \n    return\n\ndef get_most_common_month(people):\n    # TODO:\n    # Use the \"months\" dictionary to record counts of birthday months\n    # for persons in the \"people\" data.\n    # Return the month with the largest number of birthdays.\n    months = {'January':0, 'February':0, 'March':0, 'April':0, 'May':0, \n              'June':0, 'July':0, 'August':0, 'September':0, 'October':0,\n              'November':0, 'December':0}\n    \n    # TODO: Modify the return statement.\n    return\n\n\ndef test():\n    # Here is the data for the test. Assume there is a single most common month.\n    names = ['Howard', 'Richard', 'Jules', 'Trula', 'Michael', 'Elizabeth', 'Richard', 'Shirley', 'Mark', 'Brianna', 'Kenneth', 'Gwen', 'William', 'Rosa', 'Denver', 'Shelly', 'Sammy', 'Maryann', 'Kathleen', 'Andrew', 'Joseph', 'Kathleen', 'Lisa', 'Viola', 'George', 'Bonnie', 'Robert', 'William', 'Sabrina', 'John', 'Robert', 'Gil', 'Calvin', 'Robert', 'Dusty', 'Dario', 'Joeann', 'Terry', 'Alan', 'Rosa', 'Jeane', 'James', 'Rachel', 'Tu', 'Chelsea', 'Andrea', 'Ernest', 'Erica', 'Priscilla', 'Carol', 'Michael', 'Dale', 'Arthur', 'Helen', 'James', 'Donna', 'Patricia', 'Betty', 'Patricia', 'Mollie', 'Nicole', 'Ernest', 'Wendy', 'Graciela', 'Teresa', 'Nicole', 'Trang', 'Caleb', 'Robert', 'Paul', 'Nieves', 'Arleen', 'Milton', 'James', 'Lawrence', 'Edward', 'Susan', 'Patricia', 'Tana', 'Jessica', 'Suzanne', 'Darren', 'Arthur', 'Holly', 'Mary', 'Randal', 'John', 'Laura', 'Betty', 'Chelsea', 'Margaret', 'Angel', 'Jeffrey', 'Mary', 'Donald', 'David', 'Roger', 'Evan', 'Danny', 'William']\n    ages  = [17, 58, 79, 8, 10, 57, 4, 98, 19, 47, 81, 68, 48, 13, 39, 21, 98, 51, 49, 12, 24, 78, 36, 59, 3, 87, 94, 85, 43, 69, 15, 52, 57, 36, 52, 5, 52, 5, 33, 10, 71, 28, 70, 9, 25, 28, 76, 71, 22, 35, 35, 100, 9, 95, 69, 52, 66, 91, 39, 84, 65, 29, 20, 98, 30, 83, 30, 15, 88, 89, 24, 98, 62, 94, 86, 63, 34, 23, 23, 19, 10, 80, 88, 67, 17, 91, 85, 97, 29, 7, 34, 38, 92, 29, 14, 52, 94, 62, 70, 22]\n    months = ['January', 'March', 'January', 'October', 'April', 'February', 'August', 'January', 'June', 'August', 'February', 'May', 'March', 'June', 'February', 'August', 'June', 'March', 'August', 'April', 'April', 'June', 'April', 'June', 'February', 'September', 'March', 'July', 'September', 'December', 'June', 'June', 'August', 'November', 'April', 'November', 'August', 'June', 'January', 'August', 'May', 'March', 'March', 'March', 'May', 'September', 'August', 'April', 'February', 'April', 'May', 'March', 'March', 'January', 'August', 'October', 'February', 'November', 'August', 'June', 'September', 'September', 'January', 'September', 'July', 'July', 'December', 'June', 'April', 'February', 'August', 'September', 'August', 'February', 'April', 'July', 'May', 'November', 'December', 'February', 'August', 'August', 'September', 'December', 'February', 'March', 'June', 'December', 'February', 'May', 'April', 'July', 'March', 'June', 'December', 'March', 'July', 'May', 'September', 'November']\n    people = create_person_objects(names, ages, months)\n\n    # Calls to the two functions you have completed.\n    print(get_april_birthdays(people))\n    print(get_most_common_month(people))\n\n\n\ntest()\n# Expected result:\n# {'Michael': 11, 'Erica': 72, 'Carol': 36, 'Lisa': 37, 'Lawrence': 87, 'Joseph': 25, 'Margaret': 35, 'Andrew': 13, 'Dusty': 53, 'Robert': 89}\n# August\n",
                    "name": "data.py"
                  },
                  {
                    "text": "class Person:\n    def __init__(self, name, age, month):\n        self.name = name\n        self.age = age\n        self.birthday_month = month\n        \n    def birthday(self):\n        self.age += 1\n\ndef create_person_objects(names, ages, months):\n    my_data = zip(names, ages, months)\n    person_objects = []\n    for item in my_data:\n        person_objects.append(Person(*item))\n    return person_objects\n\ndef get_april_birthdays(people):\n    # TODO:\n    # Increment \"age\" for all people with birthdays in April.\n    # Return a dictionary \"april_birthdays\" with the names of\n    # all people with April birthdays as keys, and their updated ages \n    # as values. See the test below for an example expected output.\n    april_birthdays = {}\n    for person in people:\n        if person.birthday_month == 'April':\n            person.age += 1\n            april_birthdays[person.name] = person.age\n            \n    return april_birthdays\n\ndef get_most_common_month(people):\n    # TODO: Use the \"months\" dictionary to record counts of \n    # birthday months for persons in the \"people\" data.\n    # Return the month with the largest number of birthdays.\n    months = {'January':0, 'February':0, 'March':0, 'April':0, 'May':0, \n              'June':0, 'July':0, 'August':0, 'September':0, 'October':0,\n              'November':0, 'December':0}\n\n    for person in people:\n        months[person.birthday_month] += 1\n\n    max_month = None\n    max_value = 0\n    for key in months.keys():\n        if months[key] > max_value:\n            max_value = months[key]\n            max_month = key\n\n    return max_month\n\n\n\ndef test():\n    # Here is the data for the test. Assume there is a single most common month.\n    names = ['Howard', 'Richard', 'Jules', 'Trula', 'Michael', 'Elizabeth', 'Richard', 'Shirley', 'Mark', 'Brianna', 'Kenneth', 'Gwen', 'William', 'Rosa', 'Denver', 'Shelly', 'Sammy', 'Maryann', 'Kathleen', 'Andrew', 'Joseph', 'Kathleen', 'Lisa', 'Viola', 'George', 'Bonnie', 'Robert', 'William', 'Sabrina', 'John', 'Robert', 'Gil', 'Calvin', 'Robert', 'Dusty', 'Dario', 'Joeann', 'Terry', 'Alan', 'Rosa', 'Jeane', 'James', 'Rachel', 'Tu', 'Chelsea', 'Andrea', 'Ernest', 'Erica', 'Priscilla', 'Carol', 'Michael', 'Dale', 'Arthur', 'Helen', 'James', 'Donna', 'Patricia', 'Betty', 'Patricia', 'Mollie', 'Nicole', 'Ernest', 'Wendy', 'Graciela', 'Teresa', 'Nicole', 'Trang', 'Caleb', 'Robert', 'Paul', 'Nieves', 'Arleen', 'Milton', 'James', 'Lawrence', 'Edward', 'Susan', 'Patricia', 'Tana', 'Jessica', 'Suzanne', 'Darren', 'Arthur', 'Holly', 'Mary', 'Randal', 'John', 'Laura', 'Betty', 'Chelsea', 'Margaret', 'Angel', 'Jeffrey', 'Mary', 'Donald', 'David', 'Roger', 'Evan', 'Danny', 'William']\n    ages  = [17, 58, 79, 8, 10, 57, 4, 98, 19, 47, 81, 68, 48, 13, 39, 21, 98, 51, 49, 12, 24, 78, 36, 59, 3, 87, 94, 85, 43, 69, 15, 52, 57, 36, 52, 5, 52, 5, 33, 10, 71, 28, 70, 9, 25, 28, 76, 71, 22, 35, 35, 100, 9, 95, 69, 52, 66, 91, 39, 84, 65, 29, 20, 98, 30, 83, 30, 15, 88, 89, 24, 98, 62, 94, 86, 63, 34, 23, 23, 19, 10, 80, 88, 67, 17, 91, 85, 97, 29, 7, 34, 38, 92, 29, 14, 52, 94, 62, 70, 22]\n    months = ['January', 'March', 'January', 'October', 'April', 'February', 'August', 'January', 'June', 'August', 'February', 'May', 'March', 'June', 'February', 'August', 'June', 'March', 'August', 'April', 'April', 'June', 'April', 'June', 'February', 'September', 'March', 'July', 'September', 'December', 'June', 'June', 'August', 'November', 'April', 'November', 'August', 'June', 'January', 'August', 'May', 'March', 'March', 'March', 'May', 'September', 'August', 'April', 'February', 'April', 'May', 'March', 'March', 'January', 'August', 'October', 'February', 'November', 'August', 'June', 'September', 'September', 'January', 'September', 'July', 'July', 'December', 'June', 'April', 'February', 'August', 'September', 'August', 'February', 'April', 'July', 'May', 'November', 'December', 'February', 'August', 'August', 'September', 'December', 'February', 'March', 'June', 'December', 'February', 'May', 'April', 'July', 'March', 'June', 'December', 'March', 'July', 'May', 'September', 'November']\n    people = create_person_objects(names, ages, months)\n\n    # Calls to the two functions you have completed.\n    print(get_april_birthdays(people))\n    print(get_most_common_month(people))\n\n\n\ntest()\n# Expected result:\n# {'Michael': 11, 'Erica': 72, 'Carol': 36, 'Lisa': 37, 'Lawrence': 87, 'Joseph': 25, 'Margaret': 35, 'Andrew': 13, 'Dusty': 53, 'Robert': 89}\n# August\n",
                    "name": "solution.py"
                  }
                ]
              },
              "answer": null
            }
          ]
        }
      ]
    }
  }
}