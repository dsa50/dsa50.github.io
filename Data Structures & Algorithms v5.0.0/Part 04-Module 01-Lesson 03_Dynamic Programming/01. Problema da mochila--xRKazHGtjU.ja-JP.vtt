WEBVTT
Kind: captions
Language: ja-JP

00:00:00.290 --> 00:00:04.120
ナップサック問題は
コンピューターサイエンスにおける

00:00:04.120 --> 00:00:04.930
有名な思考エクササイズです

00:00:06.100 --> 00:00:10.980
ここに容量が限られた
理論上のナップサックがあり

00:00:10.980 --> 00:00:13.860
その許容量を超える品物があります

00:00:13.860 --> 00:00:17.669
それぞれの品物には重みと価値があります

00:00:17.670 --> 00:00:23.110
ここでの質問は、規定の重量制約で
ナップサックの総価値を

00:00:23.110 --> 00:00:24.830
どのように最適化できるかということです

00:00:24.830 --> 00:00:29.279
ここで焦点を当てるのは 0-1 ナップサック問題で
各品物は 1 つしかとることができないうえに

00:00:29.280 --> 00:00:33.370
オブジェクト全体を取るか取らないか
のいずれかを選択する必要があります

00:00:34.430 --> 00:00:37.460
他のいくつかのバリアントでは
オブジェクトの分数を取ることができます

00:00:38.740 --> 00:00:42.220
初めてこの問題を聞いたとき
まず第一に

00:00:42.220 --> 00:00:45.240
最も高い価値のオブジェクトを
代入してみようと思いました

00:00:46.240 --> 00:00:50.800
しかし、最も高い値を持つ
2 つの要素を代入すると

00:00:50.800 --> 00:00:54.780
重量制限に到達しますが
他の要素を 1 つにまとめれば

00:00:54.780 --> 00:00:56.920
より高い値を持つことになるのでしょうか

00:00:56.920 --> 00:01:00.250
コンピューターサイエンスでは実際の
ナップサック問題は多くありませんが、

00:01:00.250 --> 00:01:03.870
この問題は頻出する問題の
最適化について説明しています

00:01:04.910 --> 00:01:09.440
ベストソリューションを考案する前に
特に行き詰まった場合は

00:01:09.440 --> 00:01:13.670
時間はかかるが分かりやすい
ソリューションについて考察のもよいでしょう

00:01:13.670 --> 00:01:16.650
ここでは、オプジェクトのあらゆる
組み合わせを試し

00:01:16.650 --> 00:01:22.100
そこから最良の組み合わせを 1 つ選び
これを総当たりソリューションと呼びます

00:01:22.100 --> 00:01:26.670
ソリューションのランタイムは
2 の n 乗で

00:01:26.670 --> 00:01:29.530
n はオブジェクト数です

00:01:29.530 --> 00:01:33.510
実際に可能な組み合わせは
2 の n 乗分あります

00:01:33.510 --> 00:01:36.410
これには厳密な数学的
理由がありますが

00:01:36.410 --> 00:01:39.899
1 つの組み合わせを長さ n の
文字列と考えることもできます

00:01:41.110 --> 00:01:46.289
各スポットはナップザックに入っている場合は 1
入っていない場合は 0 になります

00:01:46.290 --> 00:01:52.200
つまり n が指数であるため
これは指数時間アルゴリズムです

00:01:52.200 --> 00:01:55.480
計算には
多項式時間アルゴリズムが推奨されます

00:01:55.480 --> 00:01:59.320
これは n に他のものを乗算したり
指数に対する定数を持つことで

00:01:59.320 --> 00:02:03.759
大きい数の場合に
より計算が速くなります

