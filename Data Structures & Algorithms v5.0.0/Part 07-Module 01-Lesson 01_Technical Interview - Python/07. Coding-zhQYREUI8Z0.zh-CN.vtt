WEBVTT
Kind: captions
Language: zh-CN

00:00:01.500 --> 00:00:04.370
我将调用我的主函数 Island Counter

00:00:04.370 --> 00:00:06.800
这是输入矩阵

00:00:06.800 --> 00:00:11.280
现在我首先要考虑的是 None

00:00:11.280 --> 00:00:18.262
如果我的矩阵等于 None 或

00:00:18.262 --> 00:00:25.513
空矩阵 我该怎么办

00:00:33.957 --> 00:00:36.535
在这种情况下 我只需立即返回 0

00:00:40.708 --> 00:00:45.385
如果不是这种情况 我需要将我的孤岛变量初始化为 0

00:00:45.386 --> 00:00:50.700
也就是孤岛的数量

00:00:50.700 --> 00:00:54.200
我需要执行两个 for 循环

00:00:54.200 --> 00:00:58.962
我需要知道行数和列数

00:01:16.685 --> 00:01:18.130
这里应该是相反的

00:01:20.490 --> 00:01:22.494
我现在开始编写 for 循环

00:01:47.767 --> 00:01:53.650
到了这一步 我需要检查下元素是否等于 1

00:02:05.586 --> 00:02:10.148
如果等于 1 我将使孤岛计数器加 1

00:02:16.457 --> 00:02:18.520
我这里需要做的就是

00:02:18.520 --> 00:02:21.790
写出之前提到的广度优先搜索

00:02:21.790 --> 00:02:24.403
我将用个辅助方法来执行这一步

00:02:32.891 --> 00:02:34.284
调用 FindPartsofIsland

00:02:45.453 --> 00:02:47.420
我直接在这里进行定义

00:02:47.420 --> 00:02:47.920
好的

00:03:09.169 --> 00:03:12.211
我首先需要初始化队列

00:03:16.685 --> 00:03:19.330
你为何选择队列？

00:03:19.330 --> 00:03:21.700
因为我们使用的是广度优先搜索

00:03:21.700 --> 00:03:27.570
所以我想要使用队列 我想要获得首个元素

00:03:27.570 --> 00:03:29.620
当我向队列中添加元素时

00:03:29.620 --> 00:03:32.690
我想要获得添加的第一个元素

00:03:32.690 --> 00:03:36.400
恩 很有道理

00:03:36.400 --> 00:03:38.429
我需要在这里导入这个方法

00:03:38.430 --> 00:03:40.478
它来自系列框架

00:03:42.914 --> 00:03:43.712
很不错

00:03:55.818 --> 00:03:58.657
我要做的第一件事是

00:03:58.657 --> 00:04:01.245
在这里附上索引 以便知道相关位置

00:04:01.245 --> 00:04:06.711
所以将这些附到队列中

00:04:18.390 --> 00:04:21.820
在这里进行广度优先搜索

00:04:21.820 --> 00:04:26.683
如果为空 则继续搜索其他内容

00:04:29.725 --> 00:04:31.490
当队列的长度

00:04:36.658 --> 00:04:38.629
不等于 0

00:04:45.160 --> 00:04:50.520
这里我要看看它四周的元素

00:04:50.520 --> 00:04:56.490
你之前提到过 我需要检查下它们是否在这些位置

00:04:56.490 --> 00:04:58.438
我将写一个辅助方法来完成这一步 

00:05:01.816 --> 00:05:05.270
现在我在检查它是否为空

00:05:05.280 --> 00:05:08.180
我在这里对此元素执行一些操作

00:05:08.180 --> 00:05:09.930
这里没空间了

00:05:09.930 --> 00:05:12.800
我画个箭头指向这里

00:05:13.850 --> 00:05:17.970
划分出这个部分

00:05:17.970 --> 00:05:19.229
用来完成这里的方法

00:05:20.700 --> 00:05:24.750
我现在要做的是

00:05:24.750 --> 00:05:29.400
从...中获得此元素 我再往上移一点

00:05:32.600 --> 00:05:34.136
我要从队列中拿出这个元素

00:05:34.136 --> 00:05:39.749
然后访问这两个变量

00:05:39.749 --> 00:05:44.280
我将它们设为新的变量

00:05:54.360 --> 00:05:56.489
现在到了这里

00:05:56.489 --> 00:06:00.410
我要看看这个元素是否等于 1 

00:06:10.960 --> 00:06:13.416
如果等于 1 我就将它设为 2 正如我之前提到的

00:06:21.420 --> 00:06:26.630
我将在这里使用辅助方法

00:06:26.630 --> 00:06:29.920
看看这些周围的元素是否真的在它周围

00:06:29.920 --> 00:06:34.220
如果是在周围 我就将它添加到队列中

00:06:34.220 --> 00:06:36.599
我将调用该方法

00:06:38.851 --> 00:06:40.900
在这里划分出更多空间吧

00:06:40.900 --> 00:06:44.680
这个方法就叫做 appendIF

00:06:48.507 --> 00:06:49.700
 84
00:06:50,630 --&gt; 00:06:53,320
我将在队列中传递

00:06:53.320 --> 00:06:54.441
我还需要

00:06:57.568 --> 00:07:01.159
行和列

00:07:01.160 --> 00:07:06.463
还有这两个条件

00:07:06.463 --> 00:07:07.820
好的

00:07:07.820 --> 00:07:13.356
我要检查的是 x 值

00:07:13.356 --> 00:07:18.431
是否大于等于 0 或者

00:07:18.431 --> 00:07:20.320
不是或者

00:07:20.320 --> 00:07:20.971
是并且

00:07:23.934 --> 00:07:30.686
小于列的数量

00:07:30.686 --> 00:07:37.438
并且如果 y 大于等于 0

00:07:37.438 --> 00:07:44.406
并且如果 y 小于行的数量

00:07:44.406 --> 00:07:48.735
如果所有这些条件都为真

00:07:48.735 --> 00:07:54.300
我要做的是将这个附到队列中

00:07:58.168 --> 00:08:01.221
我将附在这里

00:08:01.221 --> 00:08:06.988
确保附加操作正确

00:08:06.988 --> 00:08:12.500
这样便能够访问第一个元素 放在这里

00:08:12.500 --> 00:08:14.280
我的辅助方法将可以运作

00:08:14.280 --> 00:08:16.900
执行了这些操作 这里的方法

00:08:16.900 --> 00:08:18.969
这里空间不够了

00:08:18.970 --> 00:08:22.531
所有这些信息基本上就是针对它周围的所有元素

00:08:22.531 --> 00:08:23.698
调用这个方法

00:08:23.698 --> 00:08:27.897
我将附上

00:08:31.241 --> 00:08:32.681
如果

00:08:32.681 --> 00:08:33.885
我要做的是传递队列

00:08:33.885 --> 00:08:39.860
列 行 以及 1 乘以 y

00:08:42.308 --> 00:08:45.170
这将是它右侧的元素

00:08:48.682 --> 00:08:52.629
这将是它下方的元素

00:09:01.793 --> 00:09:03.100
这是左侧

00:09:19.790 --> 00:09:21.276
这是上方

00:09:21.276 --> 00:09:22.780
就这样

00:09:24.940 --> 00:09:27.110
进展的很顺利

00:09:27.110 --> 00:09:28.510
是的

00:09:28.510 --> 00:09:32.260
在提前思考了所有必要的步骤然后再编写解决方案

00:09:32.260 --> 00:09:36.800
实际的编程过程比一开始

00:09:36.800 --> 00:09:37.770
直接就编写代码简单多了

00:09:37.770 --> 00:09:40.699
面试者还确保了面试官知道

00:09:40.700 --> 00:09:42.560
他在编写代码时每步都在干什么

00:09:42.560 --> 00:09:45.810
但是在编写代码时他没有读出所有的代码

00:09:45.810 --> 00:09:49.550
经常看到面试者一边编写代码 一边读出所有代码

00:09:49.550 --> 00:09:52.859
这样会令人反感 不会让面试官产生理解

00:09:54.180 --> 00:09:54.900
是的

00:09:54.900 --> 00:09:58.420
在这次面试中 他在编写代码时 主要是解释

00:09:58.420 --> 00:10:00.000
各部分代码的作用

00:10:00.000 --> 00:10:03.630
读出代码 可以在出错时让面试官

00:10:03.630 --> 00:10:05.620
跳进来提醒你

00:10:05.620 --> 00:10:08.400
同时向面试官证明

00:10:08.400 --> 00:10:10.520
你是一边思考 一边编写代码

00:10:10.520 --> 00:10:13.490
如果你只是默默地写出代码 可能让人觉得你在凭着记忆默写出来

