WEBVTT
Kind: captions
Language: ja-JP

00:00:02.400 --> 00:00:05.800
エラーがないか確認しますね

00:00:06.536 --> 00:00:10.212
デックに括弧を付けるのを忘れてましたね

00:00:10.212 --> 00:00:12.520
これで正しいメソッドになりました

00:00:12.520 --> 00:00:13.850
では、先ほど説明した

00:00:13.850 --> 00:00:15.854
テストケースを見ていきます

00:00:15.854 --> 00:00:20.222
小さなボックスを
ここに加えますね

00:00:20.222 --> 00:00:23.730
None と空の角括弧も

00:00:23.730 --> 00:00:27.167
では見てみましょう
0 が 0 を即座に返しているのでこれで OK

00:00:27.167 --> 00:00:31.582
実際に動作するテストケースの
場合はどうでしょう

00:00:31.582 --> 00:00:33.858
ここでほとんどのコードを
確認します

00:00:33.858 --> 00:00:39.160
[BLANK_AUDIO]

00:00:39.160 --> 00:00:43.653
では見ていきましょう
ここは 0 ですね

00:00:43.653 --> 00:00:45.891
長さを確認します

00:00:45.891 --> 00:00:51.216
これは 3 に設定して

00:00:51.216 --> 00:00:53.179
ここは 2

00:00:53.179 --> 00:00:56.711
すべての要素を確認します

00:00:56.711 --> 00:01:00.870
最初の要素を見つけます

00:01:00.870 --> 00:01:06.423
アイランド数をインクリメントしているので
ここはイコール 1 になります

00:01:06.424 --> 00:01:12.209
FindPartsOfIsland メソッドがここです
q を作成してその値を追加します

00:01:12.209 --> 00:01:17.905
それから幅優先探索

00:01:17.905 --> 00:01:23.491
この例では右側にも
下にも 1 がありません

00:01:23.491 --> 00:01:27.678
なのでこれは必要はありません
次に移ります

00:01:27.678 --> 00:01:32.300
0 が送られているので何もせずに
ループを確認します

00:01:32.300 --> 00:01:33.387
1。それから

00:01:33.387 --> 00:01:38.254
またアイランド数をインクリメントして
ここは 2 になります

00:01:38.254 --> 00:01:42.794
ここを確認すると
アイランドの一部があります

00:01:42.794 --> 00:01:45.575
ここに 1 がありますね

00:01:45.575 --> 00:01:50.135
こことそこに追加します

00:01:50.135 --> 00:01:53.293
いい感じですね

00:01:53.293 --> 00:01:56.190
これはここでは設定が 2 になります

00:01:56.190 --> 00:01:57.720
これも 2

00:01:57.720 --> 00:02:01.340
この両方をキューに追加します

00:02:01.340 --> 00:02:03.672
これは最初には追加しません

00:02:03.672 --> 00:02:06.490
キューに追加するだけです

00:02:06.490 --> 00:02:09.835
ここを確認して
何もありませんね

00:02:09.836 --> 00:02:13.381
基本的にこれらは
2 に設定します

00:02:13.381 --> 00:02:17.100
それから配列にある
すべての要素を訪問します

00:02:17.100 --> 00:02:20.970
1 がもうなくなったので
これで終わりですね

00:02:20.970 --> 00:02:26.587
アイランドの数を
戻し忘れていたみたいですね

00:02:26.587 --> 00:02:33.266
[BLANK_AUDIO]

00:02:33.266 --> 00:02:34.170
これで大丈夫みたいですね

00:02:34.170 --> 00:02:37.900
[BLANK_AUDIO]

00:02:37.910 --> 00:02:39.140
すべてのコードを正しく設定できたようですね

00:02:39.140 --> 00:02:41.858
彼はハンサムなだけでなく
知性も兼ね備えているようですね

00:02:42.980 --> 00:02:45.619
&gt;&gt; デバッグプロセスは
見落とされがちですが

00:02:45.620 --> 00:02:48.760
アルゴリズム面接の
大変重要な要素です

00:02:48.760 --> 00:02:52.480
これによって候補者がコードを確認していることを
面接官に示すことができるだけでなく

00:02:52.480 --> 00:02:55.820
解を最初にコーディングした際に
候補者自身が見落とした間違いを

00:02:55.820 --> 00:02:57.310
見つける上でも役立ちます

00:02:58.590 --> 00:03:02.610
Java などの言語でコーディングする際に
セミコロンを忘れたり

00:03:02.610 --> 00:03:05.610
結果を返し忘れるといったミスは
簡単に起こりやすいものです

