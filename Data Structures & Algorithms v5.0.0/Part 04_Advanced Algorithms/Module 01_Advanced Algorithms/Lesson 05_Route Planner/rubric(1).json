{
  "id": 2499,
  "project_id": 603,
  "upload_types": [
    "repo",
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(js|css|py|html|htm|txt|md|markdown|sql|swift|java|gradle|xml|rst|yml|yaml|rmd|pdf|docx)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "",
  "hide_criteria": false,
  "created_at": "2019-02-14T22:23:50.228Z",
  "updated_at": "2019-12-04T21:51:20.477Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "checkmate_enabled": false,
  "checkmate_metadata": null,
  "available_for_cert_project": false,
  "classroom_node_id": 826007,
  "classroom_project_key": "cafa9563-7ec8-44d5-a16f-3f78d32255b1",
  "language": "en-us",
  "ndkeys": [
    "nd256",
    "nd256-beta",
    "nd256-ent"
  ],
  "coursekeys": [],
  "sections": [
    {
      "id": 5366,
      "name": "Correctness",
      "created_at": "2019-02-19T21:01:57.096Z",
      "updated_at": "2019-02-19T21:02:09.323Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 2499,
      "rubric_items": [
        {
          "id": 15481,
          "section_id": 5366,
          "passed_description": "Running test.py shows \"all tests pass\".",
          "exceeded_description": null,
          "created_at": "2019-02-19T21:02:09.443Z",
          "updated_at": "2019-02-19T21:02:24.139Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Does the submission pass all tests?",
          "exceedable": false
        },
        {
          "id": 15482,
          "section_id": 5366,
          "passed_description": "The student implements all required methods.",
          "exceeded_description": null,
          "created_at": "2019-02-19T21:02:24.276Z",
          "updated_at": "2019-04-16T23:46:28.235Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Does student implement A* search methods?",
          "exceedable": false
        },
        {
          "id": 15483,
          "section_id": 5366,
          "passed_description": "The heuristic function used to estimate the distance between two intersections is guaranteed to return a distance which is less than or equal to the true path length between the intersections.",
          "exceeded_description": null,
          "created_at": "2019-02-19T21:02:45.368Z",
          "updated_at": "2019-02-19T21:03:16.619Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Is the heuristic used in A* search admissible?",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5367,
      "name": "Choice and Usage of Data Structures",
      "created_at": "2019-02-19T21:03:16.750Z",
      "updated_at": "2019-02-19T21:03:29.427Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 2499,
      "rubric_items": [
        {
          "id": 15485,
          "section_id": 5367,
          "passed_description": "Code avoids obvious inappropriate use of lists and takes advantage of the performance improvement afforded by sets / dictionaries where appropriate. For example, a data structure like the \"open_set\" on which membership checks are frequently performed (e.g. `if node in open_set`) should not be a list. ",
          "exceeded_description": null,
          "created_at": "2019-02-19T21:03:29.556Z",
          "updated_at": "2019-04-16T23:46:28.240Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Does code avoid slow lookups through correct choice of data structures?",
          "exceedable": false
        },
        {
          "id": 15486,
          "section_id": 5367,
          "passed_description": "This item is a judgement call. Student code doesn't need to be perfect but it should avoid big performance degrading issues like...\n\n...unnecessary duplication of lists\n...looping through a large set or dictionary when a single constant-time lookup is possible\n",
          "exceeded_description": null,
          "created_at": "2019-02-19T21:03:51.579Z",
          "updated_at": "2019-02-19T21:04:03.994Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Does code avoid flagrant unnecessary performance problems? ",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 603,
    "name": "Route Planner",
    "nanodegree_key": "nd256",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": null,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 12,
    "created_at": "2019-04-15T15:49:03.772Z",
    "updated_at": "2020-05-27T00:30:32.010Z",
    "price": "7.0",
    "ungradeable_price": "3.0",
    "audit_price": null
  }
}