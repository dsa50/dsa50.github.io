WEBVTT
Kind: captions
Language: ja-JP

00:00:00.530 --> 00:00:05.530
ヒープとはさらなる制約を持つ
特定のツリー構造です

00:00:05.530 --> 00:00:10.300
ヒープでは root 要素が
ツリー構造の最大または最小値になっており

00:00:10.300 --> 00:00:15.260
すべての要素は増加順または
減少順になっています

00:00:15.260 --> 00:00:17.360
ヒープには 2 つの異なるタイプがあります

00:00:17.360 --> 00:00:22.700
最大ヒープと最小ヒープは
これらの 2 つの状況をキャプチャします

00:00:22.700 --> 00:00:27.100
最大ヒープでは親は常に
子の値より大きくなるため

00:00:27.100 --> 00:00:29.570
ルートが最大の要素に
なります

00:00:29.570 --> 00:00:34.720
最小ヒープはこれとは反対で
親は子の値より小さくなるため

00:00:34.720 --> 00:00:37.600
ルートが最小の要素になります

00:00:37.600 --> 00:00:42.260
ヒープはバイナリーツリーである必要はないため
親は子をいくつでも持つことができます

00:00:42.260 --> 00:00:44.860
探索や挿入、削除などの操作は

00:00:44.860 --> 00:00:48.820
これから討議するヒープのタイプによって
異なります

00:00:48.820 --> 00:00:51.490
ここでは最大バイナリーヒープに
焦点を当てます

00:00:52.630 --> 00:00:55.500
2 つの子ノードを持つという
規則を保持し

00:00:55.500 --> 00:00:57.309
ルートは最大要素になります

00:00:57.310 --> 00:01:00.990
さらに
バイナリーヒープは完全なツリーです

00:01:00.990 --> 00:01:04.660
これは最後のレベル以外は
すべて完全であることを意味します

00:01:04.660 --> 00:01:09.570
最後のレベルがフルでない場合
左から右へ値を追加できます

00:01:09.570 --> 00:01:13.500
行全体が記述されるまで
最も右の葉は空です

00:01:13.500 --> 00:01:16.850
このピープでは
ピークとも呼ばれる

00:01:16.850 --> 00:01:20.615
最大値を取得する関数が
一定時間において発生します

00:01:20.615 --> 00:01:23.250
探索がどのようなものか見てみましょう

00:01:23.250 --> 00:01:26.750
探索は左へまたは右へ
どちらから開始するべきでしょうか

00:01:26.750 --> 00:01:31.720
BST では、各ステップで比較を行うために
どちらの方向に進むべきかが分かっていました

00:01:31.720 --> 00:01:34.330
どちらにしても保証はありません

00:01:34.330 --> 00:01:38.520
探索は最終的には
線形時間操作であるため

00:01:38.520 --> 00:01:42.590
何らかのトリックに頼ることなく
ツリー構造全体を探索することになります

00:01:42.590 --> 00:01:46.720
注目すべき点は
最大特性を探索におけるメリットとして

00:01:46.720 --> 00:01:48.720
活用できることです

00:01:48.720 --> 00:01:52.210
たとえば探索している要素が
ルートよりも大きいとわかった時点で

00:01:52.210 --> 00:01:54.800
速やかに探索を中止できます

00:01:54.800 --> 00:01:55.460
一般的に

00:01:55.460 --> 00:01:59.199
ノード値が比較している値よりも大きい場合
最大値が判明したわけですから

00:01:59.200 --> 00:02:03.500
サブツリーの他の値を
チェックする必要はありません

00:02:03.500 --> 00:02:06.160
最悪のケースはこのままですが
平均的なケースにおいても

00:02:06.160 --> 00:02:09.160
すべての要素を探索する
必要はありません

00:02:09.160 --> 00:02:12.490
平均的なケースは
O(2/n) に近くなりますが

00:02:12.500 --> 00:02:14.220
依然として線形時間に
近似になります

