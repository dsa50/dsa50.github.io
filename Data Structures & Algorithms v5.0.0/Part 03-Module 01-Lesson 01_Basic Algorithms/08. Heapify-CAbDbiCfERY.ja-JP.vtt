WEBVTT
Kind: captions
Language: ja-JP

00:00:00.200 --> 00:00:02.850
次に要素を挿入してみましょう

00:00:02.850 --> 00:00:08.290
BST で使ったアプローチを
することができます

00:00:08.290 --> 00:00:12.740
ルートからスタートしてツリーを 1 度に 1 レベルずつ下りて
空いているスポットが見つかるまで比較を行ないます

00:00:12.740 --> 00:00:16.880
ただし大半の親ノードや
ルートよりも要素が大きい場合は

00:00:16.880 --> 00:00:19.990
ツリーを大幅に移動させなければなりません

00:00:19.990 --> 00:00:23.400
そこでここでは、別のアプローチで
挿入を行います

00:00:23.400 --> 00:00:26.900
新しい要素をツリーに空いている
次のスポットにくっつけ

00:00:26.900 --> 00:00:28.660
ヒープ化します

00:00:28.660 --> 00:00:32.300
ヒープ化とはヒーププロパティに基づいて

00:00:32.300 --> 00:00:34.230
ツリーを並べ替える操作です

00:00:34.230 --> 00:00:38.100
親要素は子要素より
大きくなければならないため

00:00:38.100 --> 00:00:41.520
新しい要素とその親を比較し続け
子が大きくなった場合には

00:00:41.520 --> 00:00:43.260
置き換える必要があります

00:00:44.840 --> 00:00:48.530
ルートをツリーから削除する
抽出操作に

00:00:48.530 --> 00:00:50.980
同様のアプローチを取ることができます

00:00:50.980 --> 00:00:54.190
ルートのスポットに
一番右の葉をくっつけ

00:00:54.190 --> 00:00:58.739
その子と比較して
必要があれば置き換えます

00:00:58.740 --> 00:01:01.300
挿入・削除のランタイム

00:01:01.300 --> 00:01:07.630
より一般的な抽出のケースは
最悪のケースでは結局 O(log) になります

00:01:07.630 --> 00:01:12.600
最終的に、ツリーの上下に要素を移動させ

00:01:12.600 --> 00:01:16.839
ツリーの高さと同じ数くらいの操作になるのが
最悪のケースです

