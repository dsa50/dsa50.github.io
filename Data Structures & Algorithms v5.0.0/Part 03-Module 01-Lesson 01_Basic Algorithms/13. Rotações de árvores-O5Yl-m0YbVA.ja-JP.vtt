WEBVTT
Kind: captions
Language: ja-JP

00:00:00.330 --> 00:00:04.990
4 と 5 のケースでは、ノードの親は
赤でその兄弟は黒です

00:00:06.340 --> 00:00:09.660
いずれの場合も
回転を行う必要があります

00:00:09.660 --> 00:00:14.000
回転では、ノードの順序を崩さずに

00:00:14.000 --> 00:00:17.970
ツリーの構造だけを変更するよう
ノードのグループをシフトします

00:00:17.970 --> 00:00:20.770
これは BST なので

00:00:20.770 --> 00:00:23.178
要素の順序はしっかりと
守らなくてはなりません

00:00:23.178 --> 00:00:26.770
ケース 4 では、赤ノードと

00:00:26.770 --> 00:00:32.600
その赤親はその親と
同じ側にいません

00:00:32.600 --> 00:00:35.410
使用するノードは右子で
その親は左子です

00:00:36.600 --> 00:00:40.650
ここでは、ノードが
順序を崩さずに

00:00:40.650 --> 00:00:43.239
左へシフトしているため
左回転を行います

00:00:44.480 --> 00:00:49.349
この時点で、設定はケース 5 と
まったく同じで

00:00:49.350 --> 00:00:53.900
赤ノードとその赤親がいずれも
その親と同じ側にいます

00:00:55.600 --> 00:00:56.400
これが左回転です

00:00:57.640 --> 00:01:01.110
ここで右回転をします
ただし今回は

00:01:01.110 --> 00:01:03.650
祖父母とその両方の子を含みます

00:01:04.709 --> 00:01:07.495
これら 2 つのノードの色も変えます

00:01:07.495 --> 00:01:09.178
見てください

00:01:09.178 --> 00:01:12.660
パスにある黒ノードの
数を変えることなく

00:01:12.660 --> 00:01:13.250
ノードを並べ替えました

00:01:14.260 --> 00:01:18.460
これらが挿入で起こる可能性がある
すべてのケースです

00:01:18.460 --> 00:01:23.100
ここでも同じように、巧妙に並べ替えを行うだけで
赤黒木と BST の特性を

00:01:23.100 --> 00:01:25.800
満たすことができました

00:01:25.800 --> 00:01:27.310
回転を行う際には

00:01:27.310 --> 00:01:31.700
1 つのサブツリーが他よりも
はるかに大きくならないようにしました

00:01:32.330 --> 00:01:38.364
探索や削除と同じく、挿入は
平均的なケースや最悪のケースでは log(n) になります

00:01:38.364 --> 00:01:44.270
バランスが崩れる可能性があるため
BST は最悪のケースでは O(n) になります

00:01:44.270 --> 00:01:46.679
ここでは注意してバランスを保っているため

00:01:46.680 --> 00:01:48.350
ランタイムはさほど大きくなりません

