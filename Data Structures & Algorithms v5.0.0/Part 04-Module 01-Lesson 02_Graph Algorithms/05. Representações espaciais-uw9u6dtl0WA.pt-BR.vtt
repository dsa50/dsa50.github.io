WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:02.534
Grafos podem funcionar
da mesma forma,

00:00:02.567 --> 00:00:05.000
mas ser construídos
de várias formas.

00:00:05.033 --> 00:00:07.701
Com uma linguagem orientada
a objetos,

00:00:07.734 --> 00:00:11.901
você pode criar objetos vértice
e aresta, e dar propriedades,

00:00:11.934 --> 00:00:15.400
como nome, força,
número de ID, etc.

00:00:15.968 --> 00:00:20.601
Um vértice poderia ter uma lista
das suas arestas, e vice-versa.

00:00:20.634 --> 00:00:24.367
Porém, operações de percurso
podem ser inconvenientes

00:00:24.400 --> 00:00:28.167
se você precisar pesquisar
em objetos vértice e aresta.

00:00:28.200 --> 00:00:30.834
Há vários modos
de representar conexões

00:00:30.868 --> 00:00:33.934
em grafos simples
que só usam listas.

00:00:33.968 --> 00:00:38.400
Um exemplo é uma lista de arestas,
que é o que parece,

00:00:38.434 --> 00:00:40.801
somente uma lista
de arestas.

00:00:40.834 --> 00:00:45.634
As arestas são representadas
por uma lista de dois elementos.

00:00:45.667 --> 00:00:48.601
Eles costumam ser números
que correspondem

00:00:48.634 --> 00:00:51.501
a números de ID
de vértices.

00:00:51.534 --> 00:00:53.267
No fim das contas,

00:00:53.300 --> 00:00:57.033
esta lista só mostra dois nós
com uma aresta entre eles.

00:00:57.067 --> 00:01:01.534
E uma lista de arestas
abrange todas as listas pequenas.

00:01:02.033 --> 00:01:06.133
Como nossa lista de arestas
contém uma lista de outras listas,

00:01:06.167 --> 00:01:10.801
às vezes é chamada
de lista bidimensional ou lista 2D.

00:01:10.834 --> 00:01:13.267
Uma lista de listas
de listas

00:01:13.300 --> 00:01:16.400
seria chamada de lista 3D,
e assim vai.

00:01:17.200 --> 00:01:21.934
Uma lista de adjacência é outro jeito
de representar arestas num grafo.

00:01:21.968 --> 00:01:26.534
Nela, seus vértices costumam
ter um número de ID

00:01:26.567 --> 00:01:29.567
que corresponde
ao índice em um array.

00:01:29.601 --> 00:01:33.901
No seu array, cada espaço é usado
para armazenar uma lista de nós

00:01:33.934 --> 00:01:36.634
à qual o nó sem ID
é adjacente.

00:01:37.167 --> 00:01:42.501
Por exemplo, a abertura no índice 0
representa um vértice de ID 0.

00:01:42.534 --> 00:01:45.667
Esse vértice partilha uma aresta
com um nó,

00:01:45.701 --> 00:01:49.901
então uma referência a esse nó
é armazenada na 1ª vaga no array.

00:01:49.934 --> 00:01:53.300
Novamente, a lista de adjacência
é bidimensional,

00:01:53.334 --> 00:01:56.701
já que é uma lista
que contém outras listas.

