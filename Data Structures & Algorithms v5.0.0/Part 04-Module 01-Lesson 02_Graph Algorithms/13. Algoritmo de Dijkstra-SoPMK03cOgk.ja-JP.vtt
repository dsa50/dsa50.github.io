WEBVTT
Kind: captions
Language: ja-JP

00:00:00.520 --> 00:00:03.240
重みが付いた
無向グラフの

00:00:03.240 --> 00:00:06.689
最短経路問題を解く方法は
ダイクストラアルゴリズムと呼ばれます

00:00:08.290 --> 00:00:12.640
ではここからここまでの最短経路を
探してみましょう

00:00:12.640 --> 00:00:15.760
まずすべての頂点に
距離値を与えます

00:00:16.790 --> 00:00:21.710
距離は出発点から
現在の頂点間の経路における

00:00:21.710 --> 00:00:22.930
エッジの重みの合計です

00:00:24.170 --> 00:00:25.750
アルゴリズムの終了時点で

00:00:25.750 --> 00:00:28.360
この距離は
最短経路の距離になります

00:00:29.520 --> 00:00:32.820
開始する距離値は
無限大です

00:00:32.820 --> 00:00:36.980
これはプレースホルダー値で
ノードが発見された時点で更新され

00:00:36.980 --> 00:00:38.669
実際の距離が保存されます

00:00:39.680 --> 00:00:43.180
開始するノードは
距離値がゼロです

00:00:43.180 --> 00:00:47.610
ダイクストラ法の一般的な実装は
最小優先度付きキューの使用で

00:00:47.610 --> 00:00:50.540
これは最小優先度が付いた
要素または

00:00:50.540 --> 00:00:53.820
この例では最短距離
を効率的に削除できる方法です

00:00:54.950 --> 00:00:58.910
優先度付きキューに
すべてのノードを保存し

00:00:58.910 --> 00:01:03.890
Extract Min を実行して最小要素を取り出すと
距離がゼロの要素は 1 つだけになります

00:01:04.400 --> 00:01:06.750
開始ノードからは
いくつかのオプションがあります

00:01:06.750 --> 00:01:11.330
各エッジをたどり
ノードの隣に記載されている

00:01:11.330 --> 00:01:14.935
距離値で更新します
これはエッジの重みに過ぎません

00:01:16.135 --> 00:01:17.955
ここで選択を迫られます

00:01:17.955 --> 00:01:19.195
どのノードをたどるべきでしょうか

00:01:20.205 --> 00:01:23.625
必ず距離値が最小の
ノードを選びます

00:01:23.625 --> 00:01:25.955
つまりキューにおいて
Extract Min を実行するためです

00:01:27.135 --> 00:01:30.265
常に最短距離のノードを
選択することから

00:01:30.265 --> 00:01:32.725
ダイクストラ法は貪欲法
とも呼ばれます

00:01:33.730 --> 00:01:36.980
このアルゴリズムクラスの
原則は

00:01:36.980 --> 00:01:41.590
現地点で最適だと思われるオプションを選択するので
貪欲と名付けられています

00:01:41.590 --> 00:01:45.520
隣接するすべてのノードをたどるというプロセスを繰り返します
これによって距離値を更新して

00:01:45.520 --> 00:01:49.640
キューにあるノードを
減らします

00:01:50.920 --> 00:01:54.700
プロセスを続行し
キューから最小値を取り出し

00:01:54.700 --> 00:01:58.820
隣接する要素を探索します
これを探索するノードが

00:01:58.820 --> 00:02:03.160
キューから取り出されるまで、または
他の距離が無限大になるまで行います

00:02:03.160 --> 00:02:05.600
これは探索している経路が
存在しないことを意味します

00:02:06.790 --> 00:02:10.560
ダイクストラ法の基本的なランタイムは
頂点の数の二乗です

00:02:11.700 --> 00:02:16.429
最悪のケースではグラフにある
すべてのノードを 1 回または 2 回たどり

00:02:16.430 --> 00:02:19.190
そのノードで毎回
最小要素を求めるために

00:02:19.190 --> 00:02:19.930
キューを検索する必要があります

00:02:21.680 --> 00:02:25.712
ダイクストラ法にはいくつもの
最適化の方法があります

00:02:25.712 --> 00:02:29.497
優先度付きキューが効率的に実装されていれば
ランタイムはこのようになります

00:02:29.497 --> 00:02:30.629
[無音]

