WEBVTT
Kind: captions
Language: ja-JP

00:00:00.800 --> 00:00:04.420
幅優先探索 (BFS) も
実は非常に似ています

00:00:04.420 --> 00:00:08.250
すべてのエッジを訪れ
すべてのノードをチェックします

00:00:08.250 --> 00:00:11.110
ただし、グラフ全体を引き続き確認する前に
1 つのノードのエッジを

00:00:11.110 --> 00:00:12.719
すべて探索します

00:00:13.870 --> 00:00:16.100
ここでも最初のノードからスタートし

00:00:16.100 --> 00:00:19.450
「確認済み」のマークを付けてから
それに隣接するノードを訪れます

00:00:20.460 --> 00:00:23.860
そのノードをマークしたら
キューに追加できます

00:00:23.860 --> 00:00:28.759
DFS に使用したキューと
スタックの違いについて覚えていますか

00:00:28.760 --> 00:00:31.970
キューの場合は、そこに最初に配置した
要素を削除しますが

00:00:31.970 --> 00:00:35.250
スタックの場合は、最後に追加された
要素を削除します

00:00:36.600 --> 00:00:38.400
最初のノードに戻って

00:00:38.400 --> 00:00:42.930
それに隣接するすべての要素を訪問し
それぞれを「確認済み」としてキューに追加します

00:00:44.100 --> 00:00:48.290
エッジがなくなったら
キューからノードをデキューし

00:00:48.290 --> 00:00:50.140
それを次の開始点として使用します

00:00:51.390 --> 00:00:53.960
これに隣接するすべての
ノードを確認し

00:00:53.960 --> 00:00:57.215
オプションがなくなるまで
各ノードをスタックに追加します

00:00:58.225 --> 00:01:00.785
デキューする際には、取得するのは開始したノードに

00:01:00.785 --> 00:01:03.485
隣接するノードである点に
注意することが重要です

00:01:04.525 --> 00:01:09.625
グラフからツリーを作成する際には
BFS をイメージするといいかもしれません

00:01:09.625 --> 00:01:12.665
開始ノードがルートとなり

00:01:12.665 --> 00:01:15.589
隣接ノードのグループが
ツリーでは次のレベルとなります

00:01:16.590 --> 00:01:20.230
ノードは 1 レベルずつ
追加し続ける必要があります

00:01:20.230 --> 00:01:24.260
1 つのレベル全体を終了してから
次のレベルへと進みます

00:01:24.260 --> 00:01:25.985
あっという間に BFS は終了です

00:01:27.150 --> 00:01:31.880
また効率は同じく、エッジ数に
頂点数を足したものになります

00:01:31.880 --> 00:01:35.410
同じように、走査中にすべてのエッジと
頂点を訪れます

