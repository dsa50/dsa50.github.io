WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.634
Nos grafos,
a busca em profundidade ou DFS

00:00:03.667 --> 00:00:08.133
opera sob os mesmos princípios
que a DFS em árvores.

00:00:08.167 --> 00:00:13.801
Lembre-se de que buscas e percursos
de grafos são quase a mesma coisa.

00:00:13.834 --> 00:00:16.534
Em um percurso,
você vê cada elemento.

00:00:16.567 --> 00:00:21.701
Numa busca, você para de percorrer
quando acha o elemento que quer.

00:00:21.734 --> 00:00:24.534
Diferentemente da árvore,
não há raízes em grafos,

00:00:24.567 --> 00:00:27.300
então não há um lugar
por onde começar.

00:00:27.334 --> 00:00:29.434
Pode-se começar
por qualquer nó.

00:00:29.467 --> 00:00:32.934
Primeiro, marque o nó selecionado
como "visto".

00:00:32.968 --> 00:00:36.033
Uma implementação comum da DFS
usa uma pilha.

00:00:36.067 --> 00:00:39.934
Assim podemos armazenar o nó
que acabamos de ver na pilha.

00:00:39.968 --> 00:00:44.934
Depois, escolha uma aresta,
siga-a e marque o nó como "visto".

00:00:45.434 --> 00:00:47.467
Aí, adicione-o à pilha.

00:00:47.501 --> 00:00:51.000
Desde que haja mais arestas
e mais nós não vistos,

00:00:51.033 --> 00:00:53.701
você continuará
repetindo essas etapas.

00:00:53.734 --> 00:00:56.601
Quando chegar
em um nó já visto,

00:00:56.634 --> 00:01:00.567
volte para o nó anterior
e tente outra aresta.

00:01:00.601 --> 00:01:05.267
Se ficar sem arestas com nós novos,
desempilhe o nó atual

00:01:05.300 --> 00:01:10.033
e volte para o nó anterior,
que é o próximo na pilha.

00:01:10.067 --> 00:01:13.868
Continue fazendo isso
até ter desempilhado tudo

00:01:13.901 --> 00:01:17.234
ou achado o nó
que você estava procurando.

00:01:17.267 --> 00:01:19.868
Há outra implementação comum
da DFS

00:01:19.901 --> 00:01:22.267
que usa a recursividade,
sem pilhas.

00:01:22.300 --> 00:01:25.701
Como pode imaginar,
basta repetir o mesmo processo

00:01:25.734 --> 00:01:28.300
de escolher uma aresta
e marcar um nó

00:01:28.334 --> 00:01:31.267
até ficar sem nós novos
para explorar.

00:01:31.300 --> 00:01:36.067
Isso vira o caso base, e você volta
para o último nível de recursividade,

00:01:36.100 --> 00:01:39.067
que, por acaso,
é o nó anterior na busca.

00:01:39.767 --> 00:01:45.267
Neste algoritmo, visitamos claramente
cada aresta e vértice uma vez.

00:01:45.300 --> 00:01:48.534
Aí, o tempo de execução
costuma ser escrito assim,

00:01:48.567 --> 00:01:52.400
que é o número de arestas
mais o número de vértices.

00:01:53.067 --> 00:01:57.000
Veja que visitamos cada aresta
duas vezes.

00:01:57.033 --> 00:02:00.334
Uma para explorar
e outra para voltar por ela.

00:02:00.868 --> 00:02:03.567
Tecnicamente,
o tempo de execução é 2|E|,

00:02:03.601 --> 00:02:06.801
mas a versão aproximada
continua a mesma.

00:02:06.834 --> 00:02:11.567
O próprio número de arestas
resume bem o tempo de execução,

00:02:11.601 --> 00:02:15.567
mas o |V| refere-se ao tempo usado
para procurar um vértice.

00:02:15.601 --> 00:02:19.634
O tempo exato varia dependendo
da estrutura que você escolher,

00:02:19.667 --> 00:02:23.801
então baseie-o na sua implementação
quando solicitado.

