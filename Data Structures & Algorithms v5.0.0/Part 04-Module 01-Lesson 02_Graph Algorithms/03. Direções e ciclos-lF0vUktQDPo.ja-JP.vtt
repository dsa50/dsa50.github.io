WEBVTT
Kind: captions
Language: ja-JP

00:00:00.610 --> 00:00:03.510
グラフには多様なデータタイプの
モデリングに役立つ

00:00:03.510 --> 00:00:05.980
追加的な特性がいくつかあります

00:00:05.980 --> 00:00:10.150
エッジには方向性があり
これは 2 つのノード間の関係を意味し

00:00:10.150 --> 00:00:12.890
一方向のみに適用されます

00:00:12.890 --> 00:00:14.990
このようにエッジが

00:00:14.990 --> 00:00:18.770
方向性を持つグラフは
有向グラフです

00:00:18.770 --> 00:00:23.170
たとえばグラフを使って
旅行計画を表すなら

00:00:23.170 --> 00:00:27.970
有向エッジは出発地点と
行き先の都市を示すために使用できます

00:00:27.970 --> 00:00:30.240
多くの場合 1 つのノードが関係の開始点で

00:00:30.240 --> 00:00:33.839
もう片方が関係の終点や
行動を起こす時点です

00:00:35.300 --> 00:00:39.980
グラフのエッジを
最初のノードからもう 1 つのノードへの

00:00:39.980 --> 00:00:43.449
動詞と解釈することができます

00:00:43.450 --> 00:00:48.610
ここでは SF から東京に旅行するということです

00:00:48.610 --> 00:00:52.570
移動が往復の場合は
同じ 2 都市間を行き来するので

00:00:52.570 --> 00:00:58.490
相対する方向
つまり 2 つの同じノード間に

00:00:58.490 --> 00:01:01.390
2 つのエッジを持つことになり
それぞれのノードが移動する方向を表しています

00:01:01.390 --> 00:01:05.540
無向グラフのエッジには
方向性はありません

00:01:05.540 --> 00:01:10.110
たとえば人間関係のグラフを作り
以前会ったことがある 2 人の間に

00:01:10.110 --> 00:01:14.840
エッジを描くとしたら
それに方向性を持たせる必要ありません

00:01:14.840 --> 00:01:19.390
以前、グラフは閉路を持ち得るが
ツリー構造にはないと話しました

00:01:19.390 --> 00:01:22.830
1 つのノードから開始して
他のノードをすべて回って

00:01:22.830 --> 00:01:26.800
最初のノードに戻る場合
グラフでも閉路が発生します
23
00:01:26,800 --&gt; 00:01:26,620
グラフにおける

00:01:26.620 --> 00:01:29.759
閉路は、アルゴリズムを説明する場合
非常に危険です

00:01:30.910 --> 00:01:34.200
コードを記述することでグラフにある
すべてのノード間を移動できるとします

00:01:34.200 --> 00:01:38.000
ですが閉路があると
同じシーケンスと何度も繰り返す

00:01:38.000 --> 00:01:40.160
無限ループにはまってしまいます

00:01:41.240 --> 00:01:45.850
入力としてグラフを使用する場合は
それが非環状、つまり閉路でないことを

00:01:45.850 --> 00:01:48.530
確認する必要があります

00:01:48.530 --> 00:01:52.770
よく見かけるグラフのタイプは DAG と呼ばれる
有向非循環グラフです

00:01:53.780 --> 00:01:57.800
これは閉路のない
有向グラフのようなものです

