WEBVTT
Kind: captions
Language: ja-JP

00:00:00.270 --> 00:00:03.656
深さ優先探索、略して DFS は、グラフ上において

00:00:03.656 --> 00:00:08.176
ツリー上の DFS と同じ原則に基づいて
機能します

00:00:08.176 --> 00:00:10.509
グラフ探索とグラフ走査は

00:00:10.509 --> 00:00:13.655
大体同じものであることを
覚えておいてください

00:00:13.655 --> 00:00:17.340
走査ではすべての要素を確認しますが
探索では

00:00:17.340 --> 00:00:21.695
探している要素を見つける際に
走査を停止します

00:00:21.696 --> 00:00:24.355
ツリーとは異なり
グラフにはルートがないため

00:00:24.355 --> 00:00:27.410
明確な開始場所というものが存在しません

00:00:27.410 --> 00:00:29.460
どのノードからでも開始できます

00:00:29.460 --> 00:00:32.970
まず「確認済み」に選択したノードに
印を付けます

00:00:32.970 --> 00:00:36.600
DFS の一般的な実装では
スタックを使用します

00:00:36.600 --> 00:00:38.800
これで先ほどスタックにあった
ノードを格納できます

00:00:39.990 --> 00:00:43.255
次にエッジを選んでたどり

00:00:43.255 --> 00:00:47.347
「確認済み」のノードに印を付けて
スタックに追加します

00:00:47.347 --> 00:00:50.620
他のエッジやまだ確認していない
ノードがさらにあれば

00:00:50.620 --> 00:00:52.669
この手順を何度も繰り返します

00:00:53.720 --> 00:00:56.629
前に確認したノードに
ヒットした場合は

00:00:56.630 --> 00:00:59.450
前のノードに戻って
別のエッジを試します

00:01:00.710 --> 00:01:05.300
新しいノードをもつエッジがなくなったら
現在のノードをスタックからポップし

00:01:05.300 --> 00:01:10.600
その 1 つ前に戻ります
これがスタック上の次のノードになります

00:01:10.600 --> 00:01:14.800
スタックからすべてをポップするか
最初に探していたノードが見つかるまで

00:01:14.800 --> 00:01:16.200
このアプローチを続けます

00:01:17.280 --> 00:01:21.760
スタックではなく再帰を使用する
もう 1 つの一般的な DFS 実装があります

00:01:22.820 --> 00:01:27.500
ご想像どおりこの場合も
探索する新しいノードがなくなるまで

00:01:27.500 --> 00:01:30.429
エッジを選んでノードを「確認済み」にマークするという
プロセスを繰り返します

00:01:31.540 --> 00:01:36.900
これがベースケースとなり
一番最後の再帰レベルに戻ると

00:01:36.900 --> 00:01:38.670
これが探索にある
前のノードとなるわけです

00:01:39.760 --> 00:01:44.210
このアルゴリズムでは
明示的にすべてのエッジと頂点を 1 回訪れます

00:01:45.440 --> 00:01:48.560
したがって、ランタイムの記述は
通常このように

00:01:48.560 --> 00:01:52.600
エッジ数に
頂点数を足した式になります

00:01:53.800 --> 00:01:58.520
すべてのエッジを 2 回訪れているのに
気付かれたかもしれません

00:01:58.520 --> 00:01:59.869
1 回目は探索、次は同じエッジを通って戻ったときです

00:02:00.930 --> 00:02:03.930
厳密にはランタイムは 2 つの E ですが

00:02:03.930 --> 00:02:06.850
近似バージョンは
変わりません

00:02:06.850 --> 00:02:11.368
エッジの数自体は
ランタイムをかなり的確に要約していますが

00:02:11.368 --> 00:02:16.130
頂点を訪問する時間を考慮して
V が追加されています

00:02:16.130 --> 00:02:19.832
その正確な時間は
データ構造の選択によって異なるため

00:02:19.832 --> 00:02:22.853
質問された際には自分の実装に基づいて
考えるよう注意が必要です

00:02:22.854 --> 00:02:23.779
[BLANK_AUDIO]

