WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:05.399
Binary trees are simply trees for
where parents have at most two children.

00:00:05.400 --> 00:00:10.500
This means nodes can have zero,
one, or two children.

00:00:10.500 --> 00:00:13.330
Those children might even be null,
but that's okay.

00:00:13.330 --> 00:00:16.200
Let's see what search looks
like in a binary tree.

00:00:16.200 --> 00:00:19.490
We could start off by using any
of the traversal algorithms to go

00:00:19.490 --> 00:00:20.669
through the tree.

00:00:20.670 --> 00:00:24.460
Because there's no real order to
the elements, I need to go through every

00:00:24.460 --> 00:00:28.880
single element in the tree if the value
I'm looking for doesn't exist.

00:00:28.880 --> 00:00:32.119
There are no cool tricks here, so
we're stuck with a linear time search.

00:00:33.340 --> 00:00:37.230
A delete operation often starts out with
a search since you need to find the node

00:00:37.230 --> 00:00:38.290
you want to delete.

00:00:38.290 --> 00:00:41.740
If you're deleting a leaf,
you can simply delete it and move on.

00:00:41.740 --> 00:00:46.180
However, if you delete an internal node,
you'll suddenly have a gap in the tree.

00:00:46.180 --> 00:00:50.550
If the node you deleted only has one
child, you can actually just take it out

00:00:50.550 --> 00:00:54.930
move the child up and
attach it to the old node's parent.

00:00:54.930 --> 00:00:57.600
If you're trying to get rid of
a node that has two children,

00:00:57.600 --> 00:00:59.220
you have a few options.

00:00:59.220 --> 00:01:02.730
You could promote the child
up just like you did before.

00:01:02.730 --> 00:01:05.330
Of course, it can't always be that easy.

00:01:05.330 --> 00:01:08.950
What if both children
also have two children?

00:01:08.950 --> 00:01:09.980
In the worst case,

00:01:09.980 --> 00:01:13.900
you'll need to keep traversing down
the sub tree until you hit a leaf.

00:01:13.900 --> 00:01:16.430
Since there is no real
order requirement here,

00:01:16.430 --> 00:01:20.900
you can just put the leaf where your
deleted node was without a problem.

00:01:20.900 --> 00:01:23.480
Since there's a search involved and
some additional work to shift around

00:01:23.480 --> 00:01:26.130
the elements after deletion,
the run time is linear.

