WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.375
So BFS is actually implemented using a queue,

00:00:03.375 --> 00:00:05.355
and let's see how this works.

00:00:05.355 --> 00:00:10.740
We have a queue where we add elements to the queue from here,

00:00:10.740 --> 00:00:13.605
and then they wait in line like at a grocery store,

00:00:13.605 --> 00:00:16.770
and then dequeue we remove the element

00:00:16.770 --> 00:00:20.070
that has been waiting in line the longest relative to all the others.

00:00:20.070 --> 00:00:24.360
So we'll start at the root, we add element A to the queue here.

00:00:24.360 --> 00:00:28.020
Next we want to dequeue an element from the queue,

00:00:28.020 --> 00:00:29.295
and there's only A.

00:00:29.295 --> 00:00:33.900
So we dequeue A, and once we dequeue and remove an element from the queue,

00:00:33.900 --> 00:00:36.025
that's when we say we visited it.

00:00:36.025 --> 00:00:38.030
So we visited A.

00:00:38.030 --> 00:00:42.860
We also want to now add it's left and right children to the queue.

00:00:42.860 --> 00:00:44.615
So we first add B,

00:00:44.615 --> 00:00:46.430
the left child to the queue,

00:00:46.430 --> 00:00:49.115
and then we add C to the queue.

00:00:49.115 --> 00:00:50.855
Notice that B was added first,

00:00:50.855 --> 00:00:53.840
so it gets pushed forward and C was added most recently.

00:00:53.840 --> 00:00:55.610
So now we're done with A.

00:00:55.610 --> 00:00:57.680
Now we're going to dequeue the next element from the queue,

00:00:57.680 --> 00:01:02.835
which is now B, and then we say we visited B. This is orange.

00:01:02.835 --> 00:01:05.540
Now with B, we're going to check

00:01:05.540 --> 00:01:08.375
if it has left and right children and add them to the queue.

00:01:08.375 --> 00:01:10.865
In this case B has a child which is D,

00:01:10.865 --> 00:01:13.445
so we're enqueuing D onto the queue,

00:01:13.445 --> 00:01:15.080
and notice C gets pushed forward,

00:01:15.080 --> 00:01:17.150
and then that's it we're done with B.

00:01:17.150 --> 00:01:22.180
So now we're going to dequeue the next item which is going to be C. So C is dequeued,

00:01:22.180 --> 00:01:25.485
we say we visited C, C is this is orange,

00:01:25.485 --> 00:01:27.840
we add any left or right child,

00:01:27.840 --> 00:01:28.965
in this case there are none,

00:01:28.965 --> 00:01:32.870
so we're done with C. So now we're going to dequeue the next element,

00:01:32.870 --> 00:01:36.365
which is in this case D. When we dequeue it,

00:01:36.365 --> 00:01:39.470
we're going to check if there's a left or right child to add to the queue,

00:01:39.470 --> 00:01:40.715
in this case there isn't,

00:01:40.715 --> 00:01:41.910
and so we're done.

00:01:41.910 --> 00:01:43.445
So now the queue is empty,

00:01:43.445 --> 00:01:45.895
which means we visited all the nodes.

00:01:45.895 --> 00:01:48.845
We visited them one level at time, A,

00:01:48.845 --> 00:01:50.450
and then B, and then C,

00:01:50.450 --> 00:01:51.755
and then D: A,

00:01:51.755 --> 00:01:53.790
B, C, and D.

