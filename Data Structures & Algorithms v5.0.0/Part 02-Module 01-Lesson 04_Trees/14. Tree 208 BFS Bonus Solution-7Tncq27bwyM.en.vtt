WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.740
Now let's see how we can print out the nodes in the tree in a of structure.

00:00:04.740 --> 00:00:07.620
I'm just going to walk through the final solution

00:00:07.620 --> 00:00:10.800
because it might take a while to actually write this out in code.

00:00:10.800 --> 00:00:14.700
But you can see it's using breadth-first search by using a queue.

00:00:14.700 --> 00:00:21.105
So what looks familiar is that if it has a left child then add it to the queue,

00:00:21.105 --> 00:00:23.595
if it has a right child, add it to the queue.

00:00:23.595 --> 00:00:27.615
What's different now is that I also want to keep track of when

00:00:27.615 --> 00:00:31.905
there's no child because I still want to leave a space for it here.

00:00:31.905 --> 00:00:35.070
As you can see, I want to leave a place holder even

00:00:35.070 --> 00:00:38.430
when there is actually no left or right child.

00:00:38.430 --> 00:00:47.020
So what I'm doing here is I'm going to check if it has a child then add it, but if not,

00:00:47.020 --> 00:00:48.835
I'm just going to add none,

00:00:48.835 --> 00:00:51.760
and that's going to let me know that when I

00:00:51.760 --> 00:00:55.150
visit something and it's actually there's no child there,

00:00:55.150 --> 00:00:58.495
then I'm just going to have a place holder and call it empty.

00:00:58.495 --> 00:01:01.900
The other thing is that after I visited all the nodes,

00:01:01.900 --> 00:01:06.925
I want to be able to print them out so that they're all on their respective levels.

00:01:06.925 --> 00:01:08.665
This is level zero, level one,

00:01:08.665 --> 00:01:12.165
level two, level three.

00:01:12.165 --> 00:01:15.430
To do that for my visit order list,

00:01:15.430 --> 00:01:20.500
I'm also going to keep track of what level the node was on when I append it.

00:01:20.500 --> 00:01:22.810
I'm keeping track of the level.

00:01:22.810 --> 00:01:25.040
They'll starts at zero.

00:01:25.700 --> 00:01:30.590
For example, let's say the root node is level zero.

00:01:30.590 --> 00:01:36.425
When I add the children of the level zero node,

00:01:36.425 --> 00:01:40.220
they're going to be level 0 plus 1, so level one.

00:01:40.220 --> 00:01:43.775
Similarly, all of these are going to be

00:01:43.775 --> 00:01:47.800
incrementing the level by one when we're adding child nodes.

00:01:47.800 --> 00:01:52.820
This print statement is going to keep track of the levels when it prints things out.

00:01:52.820 --> 00:01:55.175
If the level is still the same,

00:01:55.175 --> 00:01:57.005
then they just keep it on the same row,

00:01:57.005 --> 00:02:01.835
but when the level of the node is now the next level,

00:02:01.835 --> 00:02:03.660
then I just want to add a new line character.

00:02:03.660 --> 00:02:07.205
So when I print it out, it will display on a new line.

00:02:07.205 --> 00:02:11.570
As an example, I'm going to create that tree where it's apple,

00:02:11.570 --> 00:02:15.975
banana, cherry, dates, and I'm going to print out the tree.

00:02:15.975 --> 00:02:18.510
You can see there's apple is the root,

00:02:18.510 --> 00:02:20.115
it's left child has banana,

00:02:20.115 --> 00:02:21.690
right child is cherry,

00:02:21.690 --> 00:02:24.780
and then bananas left child is dates,

00:02:24.780 --> 00:02:31.090
and then all these empties our placeholders just to keep everything lined up.

