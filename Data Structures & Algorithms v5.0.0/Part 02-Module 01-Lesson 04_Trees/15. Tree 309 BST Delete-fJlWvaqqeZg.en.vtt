WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.795
Now let's look at deleting a node from a binary search tree.

00:00:03.795 --> 00:00:06.200
So there's three cases we'll look at.

00:00:06.200 --> 00:00:10.770
One is when the node we want to delete is a leaf node,

00:00:10.770 --> 00:00:14.910
another case is when the node we want to delete has one child node,

00:00:14.910 --> 00:00:18.705
and another case is when the node that has two child nodes.

00:00:18.705 --> 00:00:20.560
So here's the first case,

00:00:20.560 --> 00:00:23.745
when it's a leaf node that we want to delete.

00:00:23.745 --> 00:00:25.830
Let's say we want to delete 4.

00:00:25.830 --> 00:00:31.995
So we traverse down until we find 4 and then we set the pointer of its parent.

00:00:31.995 --> 00:00:40.155
So this parent is 3 we set its left child pointer to none to remove 4 from the tree.

00:00:40.155 --> 00:00:44.490
Case 2 is if the node has one child node.

00:00:44.490 --> 00:00:49.195
So let's say we want to delete node 3 and it has one child node.

00:00:49.195 --> 00:00:51.315
What we can do is,

00:00:51.315 --> 00:00:53.960
for this node's parent,

00:00:53.960 --> 00:01:00.120
which is 5, we want to its this left pointer to point to its child.

00:01:00.120 --> 00:01:08.120
So it's going around 3 and we can also set node 3 to none to delete it.

00:01:08.120 --> 00:01:10.040
Here's a third case,

00:01:10.040 --> 00:01:12.620
if the node has two child nodes.

00:01:12.620 --> 00:01:14.390
So let's say in this tree,

00:01:14.390 --> 00:01:16.330
we want to delete node 7.

00:01:16.330 --> 00:01:19.000
It has a left child and also a right child.

00:01:19.000 --> 00:01:23.095
So we want to find the next highest value in order,

00:01:23.095 --> 00:01:26.170
for example, there's 3,

00:01:26.170 --> 00:01:30.175
and 4, 5, 6, 7,

00:01:30.175 --> 00:01:36.220
8, so the next highest value from 7 is 8.

00:01:36.530 --> 00:01:42.830
We find this by going to the right sub-tree of 7, the one we want to delete,

00:01:42.830 --> 00:01:45.545
and then traversing all the way to the left to find

00:01:45.545 --> 00:01:49.335
the smallest value in its right subtree.

00:01:49.335 --> 00:01:54.975
Because remember, everything in the right subtree should be greater than 7,

00:01:54.975 --> 00:01:59.460
everything in the left subtree should be less than 7 But then if we go

00:01:59.460 --> 00:02:03.935
here within this subtree to find the smallest value,

00:02:03.935 --> 00:02:07.520
we just keep traversing left until there's no left child to

00:02:07.520 --> 00:02:11.715
traverse and then that's the minimum value within this right subtree.

00:02:11.715 --> 00:02:15.575
What we'll do is we copy this value and then we

00:02:15.575 --> 00:02:20.525
replace the value in this node with this copy value of 8.

00:02:20.525 --> 00:02:23.945
Then for this node that we just copied over,

00:02:23.945 --> 00:02:25.755
we also want to remove it.

00:02:25.755 --> 00:02:29.050
So we have its parent, which is 9,

00:02:29.050 --> 00:02:35.485
have it point to its left child pointer to the right child of 8.

00:02:35.485 --> 00:02:39.640
We'll also set node 8 to none and delete it.

