WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.344
Now, let's walk through the solution of insertion.

00:00:03.344 --> 00:00:06.465
First, I defined a comparison function

00:00:06.465 --> 00:00:09.900
just to be more general because when you're comparing the values,

00:00:09.900 --> 00:00:12.030
if there are simple things like numbers,

00:00:12.030 --> 00:00:14.295
you can say one is less than the other.

00:00:14.295 --> 00:00:17.430
If the value is some kind of object,

00:00:17.430 --> 00:00:23.520
then you would want to figure out what in the object you want to compare with the other,

00:00:23.520 --> 00:00:26.820
and so I'm just writing this to make it more general,

00:00:26.820 --> 00:00:30.780
but here we're just going to return zero when the values are equal,

00:00:30.780 --> 00:00:36.995
negative one when the new value is less than the current one that's being compared to.

00:00:36.995 --> 00:00:39.125
In other words, when we want to traverse left,

00:00:39.125 --> 00:00:40.670
we return a negative one,

00:00:40.670 --> 00:00:43.580
and then when we return a one if

00:00:43.580 --> 00:00:47.210
the new node's value is greater than the current node that is being compared to.

00:00:47.210 --> 00:00:51.410
In other words, we return one when we want to traverse to the right.

00:00:51.410 --> 00:00:54.040
Here's how we can insert using a while loop.

00:00:54.040 --> 00:00:55.235
We have the new value,

00:00:55.235 --> 00:00:58.090
we're going to wrap it inside a node object.

00:00:58.090 --> 00:01:00.120
We're also going to get the root,

00:01:00.120 --> 00:01:03.320
and if the root is actually empty,

00:01:03.320 --> 00:01:04.640
that means we have an empty tree.

00:01:04.640 --> 00:01:07.245
We can go ahead and set the root to that new node.

00:01:07.245 --> 00:01:11.270
Otherwise, we're going to use a loop to walk down the tree.

00:01:11.270 --> 00:01:14.630
First we'll do a comparison of the new node and the current node.

00:01:14.630 --> 00:01:17.350
In this case, we're starting out with the root.

00:01:17.350 --> 00:01:23.785
If they're equal, then we'll just set the value of the node to the new node's value.

00:01:23.785 --> 00:01:31.745
Notice that because this node may have other children nodes already,

00:01:31.745 --> 00:01:34.190
then this will have a left and right pointer,

00:01:34.190 --> 00:01:40.820
and so basically, we don't want to say node equals new node because the new node is

00:01:40.820 --> 00:01:43.880
something we just created and it doesn't have pointers to

00:01:43.880 --> 00:01:47.675
the left and right children that this current node might actually have.

00:01:47.675 --> 00:01:51.470
So that means we've inserted the node

00:01:51.470 --> 00:01:55.515
and so we can go ahead and break out of the loop. So stop looping.

00:01:55.515 --> 00:01:58.260
Otherwise, if the comparison is negative one,

00:01:58.260 --> 00:02:01.265
I define this to mean we want to traverse to the left

00:02:01.265 --> 00:02:04.910
because the new value is less than the current node that we're comparing to,

00:02:04.910 --> 00:02:08.870
and if the node already has a left child,

00:02:08.870 --> 00:02:11.915
then we want to continue traversing left.

00:02:11.915 --> 00:02:13.850
So get left child,

00:02:13.850 --> 00:02:15.535
becomes the new node.

00:02:15.535 --> 00:02:20.830
Then at this point, we're going to be returning back to the top of the loop in this case.

00:02:20.830 --> 00:02:25.850
Otherwise, if there is room to set the left child to the new node,

00:02:25.850 --> 00:02:27.280
then we'll go ahead and do that,

00:02:27.280 --> 00:02:30.410
and that means we've inserted in node so we can break out of the loop,

00:02:30.410 --> 00:02:32.390
so we'll stop looping.

00:02:32.390 --> 00:02:36.310
This is the case when we need to continue traversing down the tree,

00:02:36.310 --> 00:02:38.045
so we continue on with a while loop,

00:02:38.045 --> 00:02:41.450
and this is the case when we've found a place to insert the node,

00:02:41.450 --> 00:02:44.710
and so we can stop traversing and break out of the loop.

00:02:44.710 --> 00:02:49.310
It's the same thing when we go down to the right subtree.

00:02:49.310 --> 00:02:52.150
Now with recursion, we can do the same thing.

00:02:52.150 --> 00:02:56.825
So here we'll start out checking if the root is none.

00:02:56.825 --> 00:03:02.165
If so, we can just set the root to that value and then we're done.

00:03:02.165 --> 00:03:08.595
Otherwise, we're going to make a recursive call to this helper function right here.

00:03:08.595 --> 00:03:10.850
We're going to pass in the root and

00:03:10.850 --> 00:03:14.575
also the node containing the value that we're trying to insert.

00:03:14.575 --> 00:03:16.895
Now what this is doing is it has

00:03:16.895 --> 00:03:19.910
a current node that is comparing to and also the new node,

00:03:19.910 --> 00:03:21.560
so we'll do a comparison,

00:03:21.560 --> 00:03:23.090
and then if they're equal,

00:03:23.090 --> 00:03:27.440
then we should set the value to the value of the new node.

00:03:27.440 --> 00:03:29.135
We're overriding it essentially.

00:03:29.135 --> 00:03:32.660
Otherwise, if we want to give us negative one,

00:03:32.660 --> 00:03:34.720
it means we need to traverse left,

00:03:34.720 --> 00:03:37.295
and it's similar to what you saw before.

00:03:37.295 --> 00:03:40.130
If the node already has a left child,

00:03:40.130 --> 00:03:42.655
then we're going to continue traversing left.

00:03:42.655 --> 00:03:46.220
Here we can use a recursive call to this function.

00:03:46.220 --> 00:03:47.495
So we're calling it again,

00:03:47.495 --> 00:03:50.060
and now we're passing in the nodes

00:03:50.060 --> 00:03:53.540
left child as well as the new node that we're trying to insert.

00:03:53.540 --> 00:03:56.180
Otherwise, if there's room,

00:03:56.180 --> 00:04:00.985
we can set the left child to the new node and then we're done,

00:04:00.985 --> 00:04:06.185
and similar with the case when we need to traverse right.

00:04:06.185 --> 00:04:09.445
When the value of the new node is greater than the current node,

00:04:09.445 --> 00:04:11.310
then we're traversing right.

00:04:11.310 --> 00:04:13.275
Now let's try this out.

00:04:13.275 --> 00:04:16.660
We're going to insert a couple values here.

00:04:16.660 --> 00:04:20.275
We're also going to insert a duplicate which should be overridden,

00:04:20.275 --> 00:04:22.360
and you can see here is a tree.

00:04:22.360 --> 00:04:24.400
Five is at the root,

00:04:24.400 --> 00:04:26.490
five is left child is four,

00:04:26.490 --> 00:04:29.410
and its right child is six because four is less than five,

00:04:29.410 --> 00:04:31.115
six is greater than five.

00:04:31.115 --> 00:04:35.325
Now four is left child is two because two is less than four,

00:04:35.325 --> 00:04:36.885
two is also less than five.

00:04:36.885 --> 00:04:40.120
Similarly, with the recursive version of it,

00:04:40.120 --> 00:04:42.560
we should get the same results.

