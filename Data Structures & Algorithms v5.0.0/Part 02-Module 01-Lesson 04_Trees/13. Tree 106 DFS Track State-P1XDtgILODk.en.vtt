WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now we're going to see what additional information we need to

00:00:03.000 --> 00:00:06.180
keep track of for our algorithm to work properly.

00:00:06.180 --> 00:00:07.860
So again, we're using the stack,

00:00:07.860 --> 00:00:10.395
but we're also going to track what I'm calling the state,

00:00:10.395 --> 00:00:12.555
and you'll see what that means in a bit.

00:00:12.555 --> 00:00:15.705
So again, we start with the root node,

00:00:15.705 --> 00:00:17.535
we check if it has a left child,

00:00:17.535 --> 00:00:19.665
it does, we go back down.

00:00:19.665 --> 00:00:24.105
So after we pushed A on the stack and then pushed B,

00:00:24.105 --> 00:00:31.620
we also make a note for node A that we've already gone down to visit its left subtree.

00:00:31.620 --> 00:00:33.840
So this will be important in a bit.

00:00:33.840 --> 00:00:35.060
So now, with B, again,

00:00:35.060 --> 00:00:38.540
we check if it has a left subtree, it does,

00:00:38.540 --> 00:00:41.090
so we push D on the stack,

00:00:41.090 --> 00:00:43.640
and we also make a note that for B,

00:00:43.640 --> 00:00:45.970
we've already visited the left subtree.

00:00:45.970 --> 00:00:48.975
Now we're at D, check left, check right.

00:00:48.975 --> 00:00:50.610
We're all done. Nothing there.

00:00:50.610 --> 00:00:52.650
We can pop D off the stack.

00:00:52.650 --> 00:00:57.095
Now we're at B, remember this was where the original version got stuck.

00:00:57.095 --> 00:01:03.230
So at B, it actually had saved information that it already visited the left sub tree,

00:01:03.230 --> 00:01:05.870
and so that way, it knows not to do that again.

00:01:05.870 --> 00:01:09.625
So then it will properly check to visit the right subtree.

00:01:09.625 --> 00:01:11.925
In this case, there's nothing there.

00:01:11.925 --> 00:01:13.845
Then once it's done,

00:01:13.845 --> 00:01:15.960
we can pop B off the stack.

00:01:15.960 --> 00:01:18.710
A, and it's a similar situation,

00:01:18.710 --> 00:01:22.880
we already saved the information that we've already visited the left sub-node,

00:01:22.880 --> 00:01:25.835
so we're going to just visit the right instead.

00:01:25.835 --> 00:01:28.235
So we push C onto the stack.

00:01:28.235 --> 00:01:34.510
For A, we save the information that it already visited the right subtree as well.

00:01:34.510 --> 00:01:36.335
Now, with C, we check left,

00:01:36.335 --> 00:01:38.675
we check right, pop it off the stack,

00:01:38.675 --> 00:01:39.890
and back at A.

00:01:39.890 --> 00:01:42.770
Now, A sees that it already visited

00:01:42.770 --> 00:01:47.320
the left and right sub-nodes and so it can be popped off the stack.

00:01:47.320 --> 00:01:50.820
Great. So now we've visited all the nodes once.

