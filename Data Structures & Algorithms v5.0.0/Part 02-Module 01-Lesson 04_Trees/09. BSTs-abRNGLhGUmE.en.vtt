WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:04.734
There's a more specific type of binary
tree called a binary search tree.

00:00:04.734 --> 00:00:10.690
A binary search tree, or BST,
is definitely a binary tree.

00:00:10.690 --> 00:00:14.220
That is, every parent node
has at most two children.

00:00:14.220 --> 00:00:20.070
But just as an array is a type of list,
a BST is just a type of binary tree.

00:00:20.070 --> 00:00:21.490
There's a specific rule for

00:00:21.490 --> 00:00:25.430
how the values associated
with each node are arranged.

00:00:25.430 --> 00:00:30.001
BSTs are sorted so every value on
the left of a particular node is smaller

00:00:30.001 --> 00:00:34.739
than it and every value on the right
of a particular node is larger than it.

00:00:34.739 --> 00:00:39.715
Because BSTs have this structure, we can
do operations like search, insert, and

00:00:39.715 --> 00:00:41.580
delete pretty quickly.

00:00:41.580 --> 00:00:43.259
Let's say we want to find 7.

00:00:43.259 --> 00:00:45.340
We would start at the root.

00:00:45.340 --> 00:00:49.020
We see 7 is greater than 5 so
we go right next.

00:00:49.020 --> 00:00:52.730
Since our next element is 8,
we know our next move is left.

00:00:52.730 --> 00:00:55.290
And in just a few steps we found it.

00:00:55.290 --> 00:00:58.900
You may have noticed that we didn't need
to search every element to figure out

00:00:58.900 --> 00:01:01.170
where the one I was looking for
belonged.

00:01:01.170 --> 00:01:04.680
We just had to look at one value
in each level of the tree, and

00:01:04.680 --> 00:01:08.130
then we can make a decision with
just a comparison to my element.

00:01:08.130 --> 00:01:12.690
That means the run time of a search on
a BST is just the height of the tree,

00:01:12.690 --> 00:01:16.220
which we proved was log(n) when
we learned about inserting.

00:01:16.220 --> 00:01:20.030
Inserting in a binary tree is
pretty much the same process.

00:01:20.030 --> 00:01:23.960
You start at the top and you can make
quick decisions about where to look at

00:01:23.960 --> 00:01:27.170
each step by comparing to
the element you want to add.

00:01:27.170 --> 00:01:29.430
Eventually you'll hit that
open spot in the tree.

00:01:30.530 --> 00:01:34.010
As long as you compared your
element correctly at each step,

00:01:34.010 --> 00:01:38.310
you can put your new element there and
not violate the core BST properties.

00:01:39.650 --> 00:01:42.180
Deleting is yet again a bit complicated.

00:01:43.280 --> 00:01:46.820
However, it's complicated in the same
way that it was for the generic

00:01:46.820 --> 00:01:50.710
binary tree, so those solutions for
different cases still apply.

