WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.214
So now let's see how we implement this algorithm correctly in code.

00:00:04.214 --> 00:00:06.570
We're going to keep track of the state.

00:00:06.570 --> 00:00:12.765
I'll do that by defining a class state which saves the node as well,

00:00:12.765 --> 00:00:15.480
but has two additional flags to keep track if we've already

00:00:15.480 --> 00:00:18.644
visited the left child or already visited the right child.

00:00:18.644 --> 00:00:21.405
These are just getter and setter functions.

00:00:21.405 --> 00:00:24.900
So here's our pre-order with stack function, takes in a tree.

00:00:24.899 --> 00:00:26.429
So most things are quite similar,

00:00:26.429 --> 00:00:30.179
except what we push onto the stack is not the node itself,

00:00:30.179 --> 00:00:33.210
but it's going to be a state object which contains the node,

00:00:33.210 --> 00:00:35.204
as well as those two flags.

00:00:35.204 --> 00:00:40.804
Now what's different as well is we not only want to check if a node has a left child,

00:00:40.804 --> 00:00:44.905
but we also want to check that we didn't already visit that left child.

00:00:44.905 --> 00:00:48.079
So if we have a left child and haven't already visited,

00:00:48.079 --> 00:00:49.519
then we can go down in here.

00:00:49.520 --> 00:00:52.730
Here, what this is saying is that for the parent node,

00:00:52.729 --> 00:00:56.644
we want to say that we visited the left child,

00:00:56.645 --> 00:01:01.010
then we wanted to grab the left child and then visit it.

00:01:01.009 --> 00:01:03.604
Then we want to create a new state for the child node.

00:01:03.604 --> 00:01:08.049
So now this node represents the left child.

00:01:08.049 --> 00:01:12.019
Then we're going to push that state onto the stack.

00:01:12.019 --> 00:01:15.424
So it's a similar idea with the right child.

00:01:15.424 --> 00:01:17.284
So now if we run this,

00:01:17.284 --> 00:01:21.034
we can check that this is doing everything properly,

00:01:21.034 --> 00:01:24.769
and you can see here, we start out with apple as the root node.

00:01:24.769 --> 00:01:27.950
Notice left and right have not been visited yet.

00:01:27.950 --> 00:01:33.020
But then now when we go down and traverse the left child, banana,

00:01:33.019 --> 00:01:36.545
we can see that apple, the parent,

00:01:36.545 --> 00:01:41.450
it says that it's already visited the left child, which was banana.

00:01:41.450 --> 00:01:46.405
So this is helping us to keep track of whether we've already gone down a certain path.

00:01:46.405 --> 00:01:48.710
We can see that the visit order is correct.

00:01:48.709 --> 00:01:53.189
We go to apple, banana, dates, then cherry.

