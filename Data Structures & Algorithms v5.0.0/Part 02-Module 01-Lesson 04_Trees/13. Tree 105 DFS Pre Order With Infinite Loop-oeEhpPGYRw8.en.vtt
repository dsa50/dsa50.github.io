WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.145
Pre-order traversal using the stack.

00:00:02.145 --> 00:00:05.445
Here's an implementation of doing pre-order on a tree,

00:00:05.445 --> 00:00:08.475
but there's something missing which is causing an infinite loop.

00:00:08.475 --> 00:00:10.395
So let's see what we can learn from this.

00:00:10.395 --> 00:00:14.385
So this pre-order with Stack Buggy is taking in a tree.

00:00:14.385 --> 00:00:18.165
It's also going to keep track of the visits with this list,

00:00:18.165 --> 00:00:21.210
and it will also use a stack to help it backtrack.

00:00:21.210 --> 00:00:25.215
It starts out getting the root and pushes it onto the stack.

00:00:25.215 --> 00:00:27.855
It also makes sure to take the top of the stack.

00:00:27.855 --> 00:00:29.520
So this is for clarity purposes,

00:00:29.520 --> 00:00:31.590
but technically this node was already set to

00:00:31.590 --> 00:00:34.365
the top of the stack because it just pushed that node.

00:00:34.365 --> 00:00:39.380
But here you can see we're going to visit the root node before continuing.

00:00:39.380 --> 00:00:42.545
So we do that by appending it to the visit order list.

00:00:42.545 --> 00:00:45.830
I added some counter and a limit to the count,

00:00:45.830 --> 00:00:49.360
just so that this while loop will stop after a while.

00:00:49.360 --> 00:00:52.505
Then we can look at the output and see what's happening.

00:00:52.505 --> 00:00:57.740
So you can see that it's going to check if the node has a left child,

00:00:57.740 --> 00:01:00.500
otherwise, it will also check if it has a right child.

00:01:00.500 --> 00:01:04.160
Otherwise, it will check when it's

00:01:04.160 --> 00:01:08.255
either visited the left and right children or there's a leaf node,

00:01:08.255 --> 00:01:10.730
then it will start to backtrack,

00:01:10.730 --> 00:01:12.110
go back up the tree,

00:01:12.110 --> 00:01:13.800
which means it would pop the stack.

00:01:13.800 --> 00:01:16.180
So let's take a look more closely here.

00:01:16.180 --> 00:01:19.555
When we're checking if there's a Left Child,

00:01:19.555 --> 00:01:23.645
then we'll go down and traverse into that left child,

00:01:23.645 --> 00:01:27.980
meaning we'll also keep track of it by pushing it onto the stack.

00:01:27.980 --> 00:01:31.130
Then we'd look at the top of the stack,

00:01:31.130 --> 00:01:34.030
we're going to go into that node,

00:01:34.030 --> 00:01:37.185
and we're going to that node because it's pre-order traversal.

00:01:37.185 --> 00:01:39.075
We're going to visit that node,

00:01:39.075 --> 00:01:43.850
and to denote that we're appending it to the visit order list.

00:01:43.850 --> 00:01:46.460
For the right child node,

00:01:46.460 --> 00:01:48.265
it's the same thing.

00:01:48.265 --> 00:01:51.830
When we get to a leaf node, for instance,

00:01:51.830 --> 00:01:55.625
we would pop that leaf node off the stack,

00:01:55.625 --> 00:01:58.970
and if the stack still has something in it,

00:01:58.970 --> 00:02:02.420
then we'll move on to that top of the stack.

00:02:02.420 --> 00:02:08.530
So it's as if you are looking at a child node and then popping off the stack,

00:02:08.530 --> 00:02:10.685
so there you're moving up to the parent node.

00:02:10.685 --> 00:02:13.205
There's also the case where when we've

00:02:13.205 --> 00:02:17.420
finished going through all of the nodes in the tree and we're back up to the root node,

00:02:17.420 --> 00:02:20.515
then that happens here where the stack is empty.

00:02:20.515 --> 00:02:23.375
Then we'll set the node to none,

00:02:23.375 --> 00:02:25.640
which will also break the loop here.

00:02:25.640 --> 00:02:28.670
So I don't expect you to see what the problem is right away,

00:02:28.670 --> 00:02:33.550
but we can just run it and then look at the output and see what's happening.

00:02:33.550 --> 00:02:37.550
So here you can see in the beginning it's doing what we expect.

00:02:37.550 --> 00:02:39.425
We have apple, which is the root node,

00:02:39.425 --> 00:02:40.670
we push it on the stack.

00:02:40.670 --> 00:02:42.125
We also have banana,

00:02:42.125 --> 00:02:43.525
we push it on the stack.

00:02:43.525 --> 00:02:46.635
We have dates, we push it onto the stack.

00:02:46.635 --> 00:02:52.220
So we pop dates off and then we have banana as the top of the stack now.

00:02:52.220 --> 00:02:56.390
But interestingly, it looks like we're pushing dates back onto the stack,

00:02:56.390 --> 00:03:00.985
even though we wanted to keep moving back up the tree.

00:03:00.985 --> 00:03:02.850
So what's happening here?

00:03:02.850 --> 00:03:06.330
Notice we visited apple, banana, dates,

00:03:06.330 --> 00:03:11.960
and it should go back up the tree so then it would not revisit dates,

00:03:11.960 --> 00:03:14.570
but it looks like it's revisiting dates and dates again.

00:03:14.570 --> 00:03:17.165
So let's see a visual of what's going on.

00:03:17.165 --> 00:03:19.055
So what's happening here is,

00:03:19.055 --> 00:03:21.860
so far it was working when we go from apple,

00:03:21.860 --> 00:03:24.540
to banana, to dates,

00:03:24.540 --> 00:03:27.000
and then it goes back up.

00:03:27.000 --> 00:03:34.150
So pops D off the stack and goes back up to banana, and then from B,

00:03:34.150 --> 00:03:39.245
what we wanted to do is to check the right sub-tree if there's anything,

00:03:39.245 --> 00:03:41.510
traverse it, otherwise go back up.

00:03:41.510 --> 00:03:45.190
But we don't want it to go back down to someplace it already visited.

00:03:45.190 --> 00:03:46.740
What's happening in fact,

00:03:46.740 --> 00:03:49.285
is that when we get to B,

00:03:49.285 --> 00:03:51.135
the logic is saying,

00:03:51.135 --> 00:03:54.995
"Okay, check if there's something in the left sub-tree," there is.

00:03:54.995 --> 00:03:57.085
So let's traverse down the left sub-tree.

00:03:57.085 --> 00:04:02.820
So what it's doing is it's going back to this node and we don't want that.

00:04:02.820 --> 00:04:06.370
So every time we pop D and return to B,

00:04:06.370 --> 00:04:11.510
we end up pushing D back onto the stack and visiting D again.

00:04:11.510 --> 00:04:14.880
So we can see how to fix this.

