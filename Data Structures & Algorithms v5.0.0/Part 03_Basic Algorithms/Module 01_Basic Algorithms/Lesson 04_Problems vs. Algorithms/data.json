{
  "data": {
    "lesson": {
      "id": 825826,
      "key": "8ec390d0-e99d-44c0-88f9-f8f9faf467fc",
      "title": "Problems vs. Algorithms",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "A series of real-world open ended problems which train you to apply suitable data structures and algorithms under different context.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "371f60fb-9f01-4773-9b64-86a36c3f0fc3",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 40320,
        "semantic_type": "Project",
        "title": "Problems vs. Algorithms",
        "description": "## Submission Instructions\n\n### What to Submit\n#### Required\n* **Answer all 7 problems** listed in the previous concepts.\n* **Code solutions must be in a separate file like \"problem_1.py\".** You are able to submit your answers by uploading a single .zip file or connecting to your GitHub repo.\n* For each question, **create a solution in Python (version 3)**. All solutions should be functions named as laid out in the concepts. Feel free to make additional helper functions or classes as needed. \n* In the respective  \"problem_1.py\" files, **include at least 3 test cases for each solution.**\n * For each test case, write the function call with the input you want to test and print it to the console\".\n * On the next line, **comment out the output you expect to see from that function call.** At least 2 of these must be edge cases, testing inputs such as null values, empty inputs, unusually large values, et cetera.\n* **Write up an explanation for each question** in a single separate text file, PDF or markdown called \"explanation_1.md\".\n * Your paragraph should not be a detailed walkthrough of the code you provided, but provide your reasoning behind decisions made in the code. For example, why did you use that data structure? You also need to explain the efficiency (time and space) of your solution.\n* Compress your one Python and one text file into a .zip, and submit.\n\n> Please take care to complete these requirements when submitting! If for any reason we are unable to review your submission, we will let you know promptly so you may resubmit. Resubmitting will start a new window for feedback delivery.\n\n#### Want to check your answers before asking for feedback?\n* Compare your answers to the [rubric](https://review.udacity.com/#!/rubrics/2498/view).\n\n## What's Next?\nOnce submitted, an industry professional will provide you with personalized, written feedback based on the [Rubric](https://review.udacity.com/#!/rubrics/2498/view).\n\nThe review will be complete once you have received this feedback.",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2498",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 826004,
          "key": "fa70db3d-5eae-4c63-b65a-e3b8a0eaefac",
          "title": "Introduction to the Project",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "fa70db3d-5eae-4c63-b65a-e3b8a0eaefac",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842326,
              "key": "85dfeb0c-1b3a-4f54-ae0a-3c73280336d8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Data Structure Questions\n\nFor this project, you will answer the **seven**  questions laid out in the next sections. The questions cover a variety of topics related to the basic algorithms you've learned in this course. You will write up a clean and efficient answer in Python, as well as a text explanation of the efficiency of your code and your design choices.\n\nA qualified reviewer, such as a software or data engineer, will look over your answer and give you detailed, written feedback on areas you're doing very well in and areas that could be improved. For example, is your solution the most efficient one possible? Are you doing a good job of explaining your thoughts? Is your code elegant and easy to read?\n\nFeel free to write this code in your local development environment. In case you do not have the ability to use your local environment or wish to use the classroom to write your code a Jupyter notebook is provided below. \n",
              "instructor_notes": ""
            },
            {
              "id": 842619,
              "key": "0f268082-a716-4b89-9731-cda571d489f6",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r818024c826004xJUPYTERvujq6sic",
              "pool_id": "jupyter",
              "view_id": "jupyter-0afw1",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Basic_Algorithms.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 842408,
          "key": "963b2be2-5df1-4e4b-8299-ac1c388f8bc2",
          "title": "Problem 1: Square Root of an Integer",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "963b2be2-5df1-4e4b-8299-ac1c388f8bc2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842434,
              "key": "d723067a-45f7-4f8b-8992-6fcea1090f99",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Finding the Square Root of an Integer \n\nFind the square root of the integer without using any Python library. You have to find the floor value of the square root.\n\nFor example if the given number is 16, then the answer would be 4.\n\nIf the given number is 27, the answer would be 5 because sqrt(5) = 5.196 whose floor value is 5.\n\nThe expected time complexity is `O(log(n))`\n\nHere is some boilerplate code and test cases to start with:\n```python\ndef sqrt(number):\n    \"\"\"\n    Calculate the floored square root of a number\n\n    Args:\n       number(int): Number to find the floored squared root\n    Returns:\n       int: Floored Square Root\n    \"\"\"\n    pass\n\nprint (\"Pass\" if  (3 == sqrt(9)) else \"Fail\")\nprint (\"Pass\" if  (0 == sqrt(0)) else \"Fail\")\nprint (\"Pass\" if  (4 == sqrt(16)) else \"Fail\")\nprint (\"Pass\" if  (1 == sqrt(1)) else \"Fail\")\nprint (\"Pass\" if  (5 == sqrt(27)) else \"Fail\")\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842409,
          "key": "abd96227-b862-4a26-838d-e0b15a028fea",
          "title": "Problem 2: Search in a Rotated Sorted Array",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "abd96227-b862-4a26-838d-e0b15a028fea",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842667,
              "key": "bbc70c70-8b72-41da-99a3-0dcf07d74e07",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Search in a Rotated Sorted Array\n\nYou are given a sorted array  which is rotated at some random pivot point.\n\nExample: [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]\n\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\n\nYou can assume there are no duplicates in the array and your algorithm's runtime complexity must be in the order of `O(log n)`.\n\nExample:\n\nInput: `nums = [4,5,6,7,0,1,2], target = 0, Output: 4`\n\nHere is some boilerplate code and test cases to start with:\n\n```python\ndef rotated_array_search(input_list, number):\n    \"\"\"\n    Find the index by searching in a rotated sorted array\n\n    Args:\n       input_list(array), number(int): Input array to search and the target\n    Returns:\n       int: Index or -1\n    \"\"\"\n   pass\n\ndef linear_search(input_list, number):\n    for index, element in enumerate(input_list):\n        if element == number:\n            return index\n    return -1\n    \ndef test_function(test_case):\n    input_list = test_case[0]\n    number = test_case[1]\n    if linear_search(input_list, number) == rotated_array_search(input_list, number):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4], 6])\ntest_function([[6, 7, 8, 9, 10, 1, 2, 3, 4], 1])\ntest_function([[6, 7, 8, 1, 2, 3, 4], 8])\ntest_function([[6, 7, 8, 1, 2, 3, 4], 1])\ntest_function([[6, 7, 8, 1, 2, 3, 4], 10])\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842413,
          "key": "78d9da01-98de-4b7d-aa80-23e0145e53b4",
          "title": "Problem 3: Rearrange Array Digits",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "78d9da01-98de-4b7d-aa80-23e0145e53b4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842730,
              "key": "8fd47722-630f-44ca-8bbd-8a89e8d41f61",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Rearrange Array Elements\n\nRearrange Array Elements so as to form two number such that their sum is maximum. Return these two numbers. You can assume that all array elements are in the range [0, 9]. The number of digits in both the numbers cannot differ by more than 1. You're not allowed to use any sorting function that Python provides and the expected time complexity is `O(nlog(n))`.\n\nfor e.g. [1, 2, 3, 4, 5]\n\nThe expected answer would be [531, 42]. Another expected answer can be [542, 31]. In scenarios such as these when there are more than one possible answers, return any one.\n\nHere is some boilerplate code and test cases to start with:\n\n```python\ndef rearrange_digits(input_list):\n    \"\"\"\n    Rearrange Array Elements so as to form two number such that their sum is maximum.\n\n    Args:\n       input_list(list): Input List\n    Returns:\n       (int),(int): Two maximum sums\n    \"\"\"\n    pass\n\ndef test_function(test_case):\n    output = rearrange_digits(test_case[0])\n    solution = test_case[1]\n    if sum(output) == sum(solution):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1, 2, 3, 4, 5], [542, 31]])\ntest_case = [[4, 6, 2, 5, 9, 8], [964, 852]]\n\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842414,
          "key": "a2c3c8e6-8869-46ac-a834-163dc52f4bc5",
          "title": "Problem 4: Dutch National Flag Problem",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "a2c3c8e6-8869-46ac-a834-163dc52f4bc5",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842437,
              "key": "2b9708be-1e87-4b69-a8bc-136dc313419c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Dutch National Flag Problem\n\nGiven an input array consisting on only 0, 1, and 2, sort the array in a single traversal. You're not allowed to use any sorting function that Python provides.\n\n**Note:** `O(n)` does not necessarily mean single-traversal. For e.g. if you traverse the array twice, that would still be an `O(n)` solution but it will not count as single traversal.\n\nHere is some boilerplate code and test cases to start with:\n\n```python\ndef sort_012(input_list):\n    \"\"\"\n    Given an input array consisting on only 0, 1, and 2, sort the array in a single traversal.\n\n    Args:\n       input_list(list): List to be sorted\n    \"\"\"\n    pass\n\ndef test_function(test_case):\n    sorted_array = sort_012(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([0, 0, 2, 2, 2, 1, 1, 1, 2, 0, 2])\ntest_function([2, 1, 2, 0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 2, 1, 2, 0, 0, 0, 2, 1, 0, 2, 0, 0, 1])\ntest_function([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2])\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842415,
          "key": "42f6d2c4-ec7b-460d-88d0-7b1e1605b8be",
          "title": "Problem 5: Autocomplete with Tries",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "42f6d2c4-ec7b-460d-88d0-7b1e1605b8be",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842620,
              "key": "a39fcacb-ff91-4125-82cc-18b085e6cc60",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Autocomplete with Tries\n\nPlease complete the notebook for this project problem and download it for your submission. ",
              "instructor_notes": ""
            },
            {
              "id": 842618,
              "key": "1f4d24f4-2e30-4728-8f21-a2664a603241",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r818024c842415xJUPYTER64udiuq5",
              "pool_id": "jupyter",
              "view_id": "jupyter-zozx0",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "ports": [],
                    "allowGrade": false,
                    "allowSubmit": false,
                    "defaultPath": "/notebooks/Trie.ipynb"
                  },
                  "kind": "jupyter"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 842417,
          "key": "62e9e352-9fb1-4308-9832-19002177de2f",
          "title": "Problem 6: Unsorted Integer Array",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "62e9e352-9fb1-4308-9832-19002177de2f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842617,
              "key": "578800de-2f9e-47a6-acb7-10a29ef76abe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Max and Min in a Unsorted Array\n\nIn this problem, we will look for smallest and largest integer from a list of unsorted integers. The code should run in O(n) time. Do not use Python's inbuilt functions to find min and max.\n\n**Bonus Challenge:** Is it possible to find the max and min in a single traversal?\n\n```\ndef get_min_max(ints):\n    \"\"\"\n    Return a tuple(min, max) out of list of unsorted integers.\n    \n    Args:\n       ints(list): list of integers containing one or more integers\n    \"\"\"\n   pass\n\n## Example Test Case of Ten Integers\nimport random\n\nl = [i for i in range(0, 10)]  # a list containing 0 - 9\nrandom.shuffle(l)\n\nprint (\"Pass\" if ((0, 9) == get_min_max(l)) else \"Fail\")\n```\n\nSorting usually requires O(n log n) time\nCan you come up with a O(n) algorithm (i.e., linear time)?",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 842419,
          "key": "8a8492a5-f76d-4dcc-a07c-3e2a2ca9b3c6",
          "title": "Problem 7: Request Routing in a Web Server with a Trie",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "8a8492a5-f76d-4dcc-a07c-3e2a2ca9b3c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 842608,
              "key": "006d70e7-7d51-44b9-bb6f-733cb2ff2dec",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# HTTPRouter using a Trie\n\nFor this exercise we are going to implement an HTTPRouter like you would find in a typical web server using the Trie data structure we learned previously.\n\nThere are many different implementations of HTTP Routers such as regular expressions or simple string matching, but the Trie is an excellent and very efficient data structure for this purpose.\n\nThe purpose of an HTTP Router is to take a URL path like \"/\", \"/about\", or \"/blog/2019-01-15/my-awesome-blog-post\" and figure out what content to return.  In a dynamic web server, the content will often come from a block of code called a handler.",
              "instructor_notes": ""
            },
            {
              "id": 842614,
              "key": "271f95c1-5c06-4408-b63c-2f2d1156b1f5",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2017/August/598b5e9b_2-5-managing-app-location-with-react-router-2x/2-5-managing-app-location-with-react-router-2x.jpg",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/271f95c1-5c06-4408-b63c-2f2d1156b1f5",
              "caption": "",
              "alt": "",
              "width": 350,
              "height": 350,
              "instructor_notes": null
            },
            {
              "id": 842609,
              "key": "c89826ff-44a4-4c04-9244-3d0baf4083b6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "First we need to implement a slightly different Trie than the one we used for autocomplete.   Instead of simple words the Trie will contain a part of the http path at each node, building from the root node `/`\n\nIn addition to a path though, we need to know which function will handle the http request.   In a real router we would probably pass an instance of a class like Python's [SimpleHTTPRequestHandler](https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler) which would be responsible for handling requests to that path.   For the sake of simplicity we will just use a string that we can print out to ensure we got the right _handler_\n\nWe could split the path into letters similar to how we did the autocomplete Trie, but this would result in a Trie with a very large number of nodes and lengthy traversals if we have a lot of pages on our site.   A more sensible way to split things would be on the parts of the path that are separated by slashes (\"/\").   A Trie with a single path entry of: \"/about/me\" would look like:\n\n(root, None) -> (\"about\", None) -> (\"me\", \"About Me handler\")\n\nWe can also simplify our RouteTrie a bit by excluding the suffixes method and the endOfWord property on RouteTrieNodes.  We really just need to insert and find nodes, and if a RouteTrieNode is not a leaf node, it won't have a handler which is fine.",
              "instructor_notes": ""
            },
            {
              "id": 842610,
              "key": "228f2525-4d15-4687-b677-e31219dc02bc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\n# A RouteTrie will store our routes and their associated handlers\nclass RouteTrie:\n    def __init__(self, ...):\n        # Initialize the trie with an root node and a handler, this is the root path or home page node\n\n    def insert(self, ...):\n        # Similar to our previous example you will want to recursively add nodes\n        # Make sure you assign the handler to only the leaf (deepest) node of this path\n\n    def find(self, ...):\n        # Starting at the root, navigate the Trie to find a match for this path\n        # Return the handler for a match, or None for no match\n\n# A RouteTrieNode will be similar to our autocomplete TrieNode... with one additional element, a handler.\nclass RouteTrieNode:\n    def __init__(self, ...):\n        # Initialize the node with children as before, plus a handler\n\n    def insert(self, ...):\n        # Insert the node as before\n```",
              "instructor_notes": ""
            },
            {
              "id": 842611,
              "key": "6f11aa9c-9048-4a0b-a47e-a4ec8fa5aca5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Next we need to implement the actual Router.   The router will initialize itself with a RouteTrie for holding routes and associated handlers.   It should also support adding a handler by path and looking up a handler by path.  All of these operations will be delegated to the RouteTrie.\n\nHint: the RouteTrie stores handlers under path parts, so remember to split your path around the '/' character\n\nBonus Points: Add a not found handler to your Router which is returned whenever a path is not found in the Trie.\n\nMore Bonus Points: Handle trailing slashes!   A request for '/about' or '/about/' are probably looking for the same page.   Requests for '' or '/' are probably looking for the root handler.   Handle these edge cases in your Router.",
              "instructor_notes": ""
            },
            {
              "id": 842612,
              "key": "26e9cc29-c08e-4d95-b078-b4fb0f492037",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```python\n# The Router class will wrap the Trie and handle \nclass Router:\n    def __init__(self, ...):\n        # Create a new RouteTrie for holding our routes\n        # You could also add a handler for 404 page not found responses as well!\n        \n    def add_handler(self, ...):\n        # Add a handler for a path\n        # You will need to split the path and pass the pass parts\n        # as a list to the RouteTrie\n        \n    def lookup(self, ...):\n        # lookup path (by parts) and return the associated handler\n        # you can return None if it's not found or\n        # return the \"not found\" handler if you added one\n        # bonus points if a path works with and without a trailing slash\n        # e.g. /about and /about/ both return the /about handler\n        \n    \n    def split_path(self, ...):\n        # you need to split the path into parts for \n        # both the add_handler and loopup functions,\n        # so it should be placed in a function here\n```",
              "instructor_notes": ""
            },
            {
              "id": 842613,
              "key": "3b679c58-eea7-4028-bc56-e2f085c6a4ea",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Test Cases\n\n```python\n# Here are some test cases and expected outputs you can use to test your implementation\n\n# create the router and add a route\nrouter = Router(\"root handler\", \"not found handler\") # remove the 'not found handler' if you did not implement this\nrouter.add_handler(\"/home/about\", \"about handler\")  # add a route\n\n# some lookups with the expected output\nprint(router.lookup(\"/\")) # should print 'root handler'\nprint(router.lookup(\"/home\")) # should print 'not found handler' or None if you did not implement one\nprint(router.lookup(\"/home/about\")) # should print 'about handler'\nprint(router.lookup(\"/home/about/\")) # should print 'about handler' or None if you did not handle trailing slashes\nprint(router.lookup(\"/home/about/me\")) # should print 'not found handler' or None if you did not implement one\n```",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}