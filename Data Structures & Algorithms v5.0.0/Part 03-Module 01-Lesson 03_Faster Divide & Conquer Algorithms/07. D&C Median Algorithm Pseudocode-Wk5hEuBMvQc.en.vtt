WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.120
Now, let's detail the pseudo code for a linear time median algorithm.

00:00:04.120 --> 00:00:08.288
The input to the algorithm is unsorted array A, of size n,

00:00:08.288 --> 00:00:13.140
and an integer k. Where the integer k lies between one and

00:00:13.140 --> 00:00:18.655
little n. And the output of the algorithm is the k-th smallest element of the array A.

00:00:18.655 --> 00:00:21.089
The first thing we need to do is find a good pivot.

00:00:21.089 --> 00:00:26.295
To do that we break A into n over five groups of five elements each.

00:00:26.295 --> 00:00:27.420
Now to be precise,

00:00:27.420 --> 00:00:30.030
we should say the ceiling of n over five groups,

00:00:30.030 --> 00:00:33.590
because little n might not be a multiple of five.

00:00:33.590 --> 00:00:36.800
But let's ignore floors and ceilings in this pseudo code.

00:00:36.799 --> 00:00:39.945
Let's denote these n over five groups as G_1,

00:00:39.945 --> 00:00:42.799
G_2 up to G_n over five.

00:00:42.799 --> 00:00:46.549
Now, how exactly do we break a into these n over five groups.

00:00:46.549 --> 00:00:49.254
Well, we can do it in any arbitrary way we like.

00:00:49.255 --> 00:00:50.640
The easiest way to do it,

00:00:50.640 --> 00:00:55.079
is to take the first five elements of A and put those into group one,

00:00:55.079 --> 00:01:00.030
take the next five elements of A and put those in group G_2 and so on.

00:01:00.030 --> 00:01:03.625
Now we have chosen one representative from each of these groups.

00:01:03.625 --> 00:01:06.674
Here's a for loop to go over the n over five groups.

00:01:06.674 --> 00:01:08.031
For the ith group,

00:01:08.031 --> 00:01:10.530
group G_i, we want to find the median.

00:01:10.530 --> 00:01:12.715
To do that we first sort this group.

00:01:12.715 --> 00:01:16.844
There's only five elements so we can take any algorithm we like to sort it.

00:01:16.844 --> 00:01:19.560
And then we take the median of these five elements.

00:01:19.560 --> 00:01:23.695
And let's let mi denote the median of group G_i.

00:01:23.694 --> 00:01:27.679
Now we want to look at these n over five medians which we found in step two.

00:01:27.680 --> 00:01:32.570
Let's let capital S denote this set of n over five medians.

00:01:32.569 --> 00:01:34.844
Next, we want to find the median of this set

00:01:34.844 --> 00:01:38.885
S. This will be our pivot P. How do we find this pivot P?

00:01:38.885 --> 00:01:40.839
How do we find the median of this set?

00:01:40.840 --> 00:01:44.085
Well, we recursively call this same algorithm Fast select,

00:01:44.084 --> 00:01:48.144
on this subset S. Now S has n over five elements,

00:01:48.144 --> 00:01:49.534
we want to find its median,

00:01:49.534 --> 00:01:53.284
therefore we look for K equal to n over 10.

00:01:53.284 --> 00:01:56.009
The n over 10 smallest element of S,

00:01:56.010 --> 00:02:03.030
is the median of this set S. And we store that in element P. Now we use P as our pivot.

00:02:03.030 --> 00:02:06.525
We partition the original set A into three sets.

00:02:06.525 --> 00:02:08.909
Those elements less than pivot P,

00:02:08.909 --> 00:02:10.734
those equal to the pivot P,

00:02:10.735 --> 00:02:15.685
and those bigger than the pivot P. This requires just one scan over the set A.

00:02:15.685 --> 00:02:18.870
Now we can use the quick select approach from before.

00:02:18.870 --> 00:02:21.515
Based on the sizes of these three sets,

00:02:21.514 --> 00:02:26.009
we either recursively search in small set, the big set,

00:02:26.009 --> 00:02:29.250
or we simply output P. In particular,

00:02:29.250 --> 00:02:32.268
if the size of the small set is at least as large as k,

00:02:32.268 --> 00:02:36.020
then we know that the k-th smallest lies in this small set.

00:02:36.020 --> 00:02:41.310
So, we recursively run this same fast select algorithm on the small set,

00:02:41.310 --> 00:02:43.400
looking for the k-th smallest.

00:02:43.400 --> 00:02:45.840
Now if k is big enough, in particular,

00:02:45.840 --> 00:02:48.435
if k is bigger than the size of a small set,

00:02:48.435 --> 00:02:50.115
plus the equal set,

00:02:50.115 --> 00:02:54.043
then we know the k-th smallest lies in this big set.

00:02:54.043 --> 00:03:00.564
So, we recursively run fast select on the big set with this K scale.

00:03:00.564 --> 00:03:04.064
So, we set k equal to k minus

00:03:04.064 --> 00:03:09.359
the size of a small set and the size of the equal set the part that we discarded.

00:03:09.360 --> 00:03:11.895
Finally, if neither of these two cases held,

00:03:11.895 --> 00:03:15.390
then we know that the k-th smallest lies in the equal set,

00:03:15.389 --> 00:03:18.869
and therefore we simply output P. Now these three cases are

00:03:18.870 --> 00:03:22.879
simply the same as we detailed before for the quick select algorithm.

00:03:22.879 --> 00:03:25.194
This completes the pseudo code for our algorithm.

00:03:25.194 --> 00:03:27.419
Now we can analyze this running time assuming

00:03:27.419 --> 00:03:30.254
that this pivot P that we found is a good pivot.

00:03:30.254 --> 00:03:32.250
And then we'll go back and prove that

00:03:32.250 --> 00:03:36.150
this pivot P is in fact guaranteed to be a good pivot.

