WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.214
Now, our aim is to try to find a good pivot in order n time.

00:00:04.214 --> 00:00:06.750
We want to do this in worst-case, order n time.

00:00:06.750 --> 00:00:11.609
What we just saw as an algorithm which finds it in order n expected time.

00:00:11.609 --> 00:00:15.599
Now, if we can successfully find a good pivot in order n time,

00:00:15.599 --> 00:00:18.899
then the running time of our algorithm will satisfy the following relation.

00:00:18.899 --> 00:00:23.879
T of n is at most T of three-fourths n, because it is a good pivot.

00:00:23.879 --> 00:00:28.364
So the sub-problem will be of size at most three fourths the original size,

00:00:28.364 --> 00:00:30.869
plus order n to find a good pivot,

00:00:30.870 --> 00:00:34.079
and order n to partition a into the three sets.

00:00:34.079 --> 00:00:36.899
Now, this recurrence solves to order n. So

00:00:36.899 --> 00:00:39.960
the overall running time of our algorithm will be order n. Now,

00:00:39.960 --> 00:00:42.329
we have a bit of slack in this recurrence.

00:00:42.329 --> 00:00:47.265
In particular, recall that instead of having 0.75n over here,

00:00:47.265 --> 00:00:49.244
we could have had 0.99n.

00:00:49.244 --> 00:00:51.854
We just need some constant less than one.

00:00:51.854 --> 00:00:53.869
What we're going to do is we're going to use

00:00:53.869 --> 00:00:57.724
this extra slack as extra time to help us find a good pivot.

00:00:57.725 --> 00:01:01.219
So now, we're going to spend instead of just order n time to find a good pivot,

00:01:01.219 --> 00:01:05.614
we're going to spend order n time plus T of.2n.

00:01:05.614 --> 00:01:08.750
So, we're going to design an algorithm with the following running time,

00:01:08.750 --> 00:01:11.444
T of n is at most T of three-fourths n,

00:01:11.444 --> 00:01:13.034
this is for the sub-problem,

00:01:13.034 --> 00:01:14.894
once we find a good pivot,

00:01:14.894 --> 00:01:18.869
plus T of n over five plus order n. This T of n over

00:01:18.870 --> 00:01:23.350
five plus order n is going to be the time it's going to take us to find a good pivot.

00:01:23.349 --> 00:01:29.250
Now, the key fact is that three quarters plus one fifth equals 0.95,

00:01:29.250 --> 00:01:30.655
is strictly less than one.

00:01:30.655 --> 00:01:34.030
So this recurrence solves to order n. So,

00:01:34.030 --> 00:01:36.200
if we can find a good pivot in this amount of time,

00:01:36.200 --> 00:01:38.225
T of n over five plus order n,

00:01:38.224 --> 00:01:41.629
then we successfully have an order n time algorithm to find the median.

00:01:41.629 --> 00:01:44.569
Now, what exactly are we going to utilize this T of

00:01:44.569 --> 00:01:48.054
n over five in order to find a good pivot? How are we going to utilize it?

00:01:48.055 --> 00:01:50.300
Well, we're going to choose a subset of A,

00:01:50.299 --> 00:01:52.640
which is of size n over five.

00:01:52.640 --> 00:01:55.730
Then, we're going to recursively run our median algorithm on

00:01:55.730 --> 00:01:59.285
this subset S. We're going to set P, the pivot,

00:01:59.284 --> 00:02:03.890
to be the median of this subset S. The time it's going to take us to find the median of

00:02:03.890 --> 00:02:09.139
this subset S is going to be T of n over five since the subset S is of size n over five.

00:02:09.139 --> 00:02:11.554
The question is, how do we choose this subset S?

00:02:11.555 --> 00:02:14.150
We need to choose this subset S so that is

00:02:14.150 --> 00:02:17.960
a good representative sample of this entire array A.

