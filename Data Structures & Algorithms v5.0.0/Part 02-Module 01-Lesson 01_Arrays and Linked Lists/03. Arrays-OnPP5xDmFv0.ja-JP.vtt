WEBVTT
Kind: captions
Language: ja-JP

00:00:00.260 --> 00:00:04.140
配列はおそらく最も一般的な
リストの実装といえます

00:00:04.140 --> 00:00:05.710
多くのプログラミング言語において

00:00:05.710 --> 00:00:09.620
配列の作成機能は
基本的な特徴として組み込まれています

00:00:09.620 --> 00:00:11.739
配列について見聞きしたことが
ある方もいるかもしれませんが

00:00:11.740 --> 00:00:15.740
後から他のデータ構造と
比較できるように

00:00:15.740 --> 00:00:18.990
配列の正式な定義について
学んでおくことが大切です

00:00:18.990 --> 00:00:22.930
先ほど説明したように
配列はいくつかのルールが追加されたリストです

00:00:22.930 --> 00:00:26.689
つまり、何らかの順序があることは
すでにわかっています

00:00:26.690 --> 00:00:30.170
ある言語では
同じタイプのオブジェクトを

00:00:30.170 --> 00:00:31.680
同じ配列にしか持てません

00:00:31.680 --> 00:00:35.310
また別の言語では
配列に異なるタイプが含まれることがあるため

00:00:35.310 --> 00:00:37.660
これを配列を定義するルールとして
使用することはできません

00:00:37.660 --> 00:00:40.500
また配列には

00:00:40.500 --> 00:00:44.600
配列を作成する際に確定する
一定のサイズがあります

00:00:44.600 --> 00:00:47.300
先ほどと同じく
これが当てはまるのは

00:00:47.300 --> 00:00:49.610
一部のプログラミング言語だけなので
定義には追加できません

00:00:49.610 --> 00:00:53.110
別の言語で配列と呼ばれるものを
定義するのは決して

00:00:53.110 --> 00:00:54.360
簡単ではありません

00:00:54.360 --> 00:00:58.879
配列とリストを区別する
大きな特徴が 1 つあります

00:00:58.880 --> 00:01:02.180
各配列にはインデックスと呼ばれる
ロケーションがあります

00:01:02.180 --> 00:01:06.580
インデックスは配列にある場所に
関連するただの数字です

00:01:06.580 --> 00:01:10.260
これらのボックスに 1～5 までの数字を
付けるのは理にはかなっていますが

00:01:10.260 --> 00:01:12.840
当然そんなに簡単ではありません

00:01:12.840 --> 00:01:15.230
通常、インデックスは 0 から始まるため

00:01:15.230 --> 00:01:21.600
これらのボックスは 1～5 ではなく
通常 0～4 になります

00:01:21.600 --> 00:01:24.230
インデックスは配列を使うのに
役立つこともあれば

00:01:24.230 --> 00:01:27.880
逆にコードの邪魔になる
こともあります

00:01:27.880 --> 00:01:31.880
真ん中のロケーションに
頻繁にアクセスする必要がある場合は

00:01:31.880 --> 00:01:33.304
配列を使うと大変便利です

00:01:33.305 --> 00:01:37.650
配列の長さを確認し

00:01:37.650 --> 00:01:43.750
中央の要素を計算して、そのインデックスの
ボックスにあるオブジェクトをチェックします

00:01:43.750 --> 00:01:47.115
ただし、配列の挿入・削除は
かなり複雑です

00:01:47.115 --> 00:01:49.384
最後に挿入するのは大抵簡単ですが

00:01:49.385 --> 00:01:53.410
配列のサイズが一定で
すでに記入している場合には困難です

00:01:53.410 --> 00:01:56.460
挿入が困難なのは、配列の中央に

00:01:56.460 --> 00:01:57.759
要素を配置したい場合です

00:01:57.760 --> 00:02:01.430
通常の挿入を行いたい場合は
挿入した要素に続くすべての要素を

00:02:01.430 --> 00:02:06.300
異なるインデックスの付いた
異なるボックスに移し直す必要があります

00:02:06.300 --> 00:02:10.320
挿入する要素の後にある要素を
すべて配列に戻す必要があるため

00:02:10.320 --> 00:02:14.950
操作全体としてはかなり非効率的です

00:02:14.950 --> 00:02:19.989
最悪のケースでは、この操作の実行時間は
線形、つまり O(n) になります

00:02:19.990 --> 00:02:22.360
削除の場合も同じような問題が起こります

00:02:22.360 --> 00:02:25.700
要素を削除すると
そのボックスは空になります

00:02:25.700 --> 00:02:29.420
インデックスから判断して、これが 4 番目の
要素だとは言えなくなります

00:02:29.420 --> 00:02:31.760
なぜならその前に空のボックスがあるからです

00:02:31.760 --> 00:02:36.490
これはすべて特定言語での配列の
実装方法によって変わることがありますが

00:02:36.500 --> 00:02:40.710
配列を抽象的に説明する際には
この点を考慮する必要があります

