WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:04.140
Arrays are perhaps the most
common implementations of lists.

00:00:04.140 --> 00:00:05.710
In many programming languages,

00:00:05.710 --> 00:00:09.620
the ability to create an array
is built in as a core feature.

00:00:09.620 --> 00:00:11.739
You may have seen or
heard of them before but

00:00:11.740 --> 00:00:15.740
it's important to have a more formal
definition of what an array is so

00:00:15.740 --> 00:00:18.990
we can compare them to other
data structures a bit later.

00:00:18.990 --> 00:00:22.930
As I mentioned before an array is
a list with a few added rules so

00:00:22.930 --> 00:00:26.689
we all ready know that it has
some things in some order.

00:00:26.690 --> 00:00:30.170
In some languages you can only have
objects with the same types in

00:00:30.170 --> 00:00:31.680
the same array.

00:00:31.680 --> 00:00:35.310
And in some languages your array
can contain different types so

00:00:35.310 --> 00:00:37.660
we can't use that as
a rule to define arrays.

00:00:37.660 --> 00:00:40.500
It would also be nice
to say that arrays have

00:00:40.500 --> 00:00:44.600
a set size that you determine
right when you create them.

00:00:44.600 --> 00:00:47.300
Again, this is only true in
some programming languages so

00:00:47.300 --> 00:00:49.610
we need to avoid adding
that to our definition.

00:00:49.610 --> 00:00:53.110
Defining the thing that different
languages call arrays is actually

00:00:53.110 --> 00:00:54.360
pretty hard.

00:00:54.360 --> 00:00:58.879
There is one big feature that
differentiates arrays from lists.

00:00:58.880 --> 00:01:02.180
Each array has a location
called an index.

00:01:02.180 --> 00:01:06.580
An index is just the number associated
with that place in the array.

00:01:06.580 --> 00:01:10.260
It would make sense to number
these boxes from one to five.

00:01:10.260 --> 00:01:12.840
But of course it can't be that simple.

00:01:12.840 --> 00:01:15.230
Normally, an index starts at zero so

00:01:15.230 --> 00:01:21.600
instead of referring to these boxes as
one to five, we usually say it's 0 to 4.

00:01:21.600 --> 00:01:24.230
Having indices can make
using arrays a great or

00:01:24.230 --> 00:01:27.880
sometimes terrible choice for
the code you're working on.

00:01:27.880 --> 00:01:31.880
If you need to access a certain
location in the middle frequently,

00:01:31.880 --> 00:01:33.304
using an array can be a great choice.

00:01:33.305 --> 00:01:37.650
You just need to keep track
of how long the array is.

00:01:37.650 --> 00:01:43.750
Calculate the middle element and check
the object in the box with that index.

00:01:43.750 --> 00:01:47.115
Insertion and deletion can be
really messy with arrays though.

00:01:47.115 --> 00:01:49.384
Inserting in the end is often easy but

00:01:49.385 --> 00:01:53.410
it can be hard if the array has a set
size and you've already filled it up.

00:01:53.410 --> 00:01:56.460
Insertion is difficult if you want
to put an element in the middle

00:01:56.460 --> 00:01:57.759
of the array.

00:01:57.760 --> 00:02:01.430
If you want to do a normal insert
you'll need to move everything

00:02:01.430 --> 00:02:06.300
after the inserted element back into
different boxes with a different index.

00:02:06.300 --> 00:02:10.320
The operation as a whole is pretty
inefficient since you need to move

00:02:10.320 --> 00:02:14.950
every element behind the one you're
inserting back in the array.

00:02:14.950 --> 00:02:19.989
In the worst case this operation
takes linear time or a big O of n.

00:02:19.990 --> 00:02:22.360
Deletion causes a similar problem.

00:02:22.360 --> 00:02:25.700
If you delete an element
you have an empty box.

00:02:25.700 --> 00:02:29.420
You can't just look at the index and say
that this is the fourth element anymore

00:02:29.420 --> 00:02:31.760
since there's an empty box before it.

00:02:31.760 --> 00:02:36.490
Again all of this can change based on
the way a particular language implements

00:02:36.500 --> 00:02:40.710
an array but it's important to consider
when talking about arrays abstractly.

