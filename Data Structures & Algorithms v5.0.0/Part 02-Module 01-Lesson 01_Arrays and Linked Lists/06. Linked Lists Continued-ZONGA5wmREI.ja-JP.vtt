WEBVTT
Kind: captions
Language: ja-JP

00:00:00.320 --> 00:00:04.320
高レベルのプログラミング言語では
連結リストと配列が

00:00:04.320 --> 00:00:05.990
区別されないことがよくあり

00:00:05.990 --> 00:00:08.920
これら両方の
性質を持ったリストが存在します

00:00:08.920 --> 00:00:11.550
しかし、これら 2 種類のデータ構造は
面接でよく訊かれる

00:00:11.550 --> 00:00:16.120
トピックのため
その違いについて知っておくことが重要です

00:00:16.120 --> 00:00:20.990
まず、主な相違点は各要素に
それぞれ異なる情報が格納されていることです

00:00:20.990 --> 00:00:24.669
どちらも 1 つの要素に
1 つの値または

00:00:24.670 --> 00:00:26.630
実際の情報が含まれています

00:00:26.630 --> 00:00:28.230
よって、配列または数字の

00:00:28.230 --> 00:00:31.250
連結リストに含まれる
値は単一の数となります

00:00:32.330 --> 00:00:33.780
配列または文字列値の

00:00:33.780 --> 00:00:37.860
連結リストの場合
各値には文字列が含まれます

00:00:37.860 --> 00:00:40.310
ここでは数字の連結リストの
場合を見てみましょう

00:00:40.310 --> 00:00:44.260
これらはどちらも
もう 1 つ情報を含みますが

00:00:44.260 --> 00:00:46.160
タイプが異なります

00:00:46.160 --> 00:00:49.639
配列では数字をインデックス
として格納します

00:00:49.640 --> 00:00:52.310
この場合は、インデックス 1 にある
要素の配列をクエリーすることで

00:00:52.310 --> 00:00:55.500
次の要素を取得できます

00:00:55.500 --> 00:00:56.690
配列についてはさておき

00:00:56.690 --> 00:00:57.940
まず連結リストを見てみましょう

00:00:59.290 --> 00:01:03.700
連結リストではリストに含まれる
次の要素の参照を格納します

00:01:03.700 --> 00:01:07.890
プログラミング言語の観点から見ると
これは次の要素をこの要素の

00:01:07.890 --> 00:01:10.290
プロパティーとして割り当てるように思われますが

00:01:10.290 --> 00:01:13.310
さらに下のハードウェアレベルでは
この要素のためのスペースが

00:01:13.310 --> 00:01:16.610
メモリー内にある程度
確保されています

00:01:16.610 --> 00:01:19.700
これらはメモリーの場所を
表しています

00:01:19.700 --> 00:01:24.420
そのため、次のコンポーネントは
次の要素のメモリーアドレスを格納し

00:01:24.420 --> 00:01:27.300
この要素は他に何も
ポイントしていないので

00:01:27.300 --> 00:01:30.259
null を格納しています

00:01:30.260 --> 00:01:33.780
配列が便利なのは
要素の挿入や削除がとても

00:01:33.780 --> 00:01:35.390
簡単なところです

00:01:35.390 --> 00:01:39.400
このように要素を追加したら
次の参照が新しいオブジェクトをポイントするように

00:01:39.400 --> 00:01:43.390
変更するだけで構いません

00:01:43.390 --> 00:01:45.950
ただし、次の参照を削除して
新しいオブジェクトに置き換える場合に

00:01:45.950 --> 00:01:50.530
使えるトリックがあるので
覚えておくと便利です

00:01:50.530 --> 00:01:54.240
この場合、このオブジェクトに対する
参照が失われるので、次のポインターを

00:01:54.240 --> 00:01:58.140
この要素に割り当ててから
この要素に対する次のポインターを

00:01:58.140 --> 00:02:02.100
割り当てる必要があります
これで参照がなくなるのを防げます

00:02:02.100 --> 00:02:04.300
これで完璧です

00:02:04.300 --> 00:02:08.370
この例では挿入に一定時間が
かかりますが、これは単にポインターの変更をしているだけで

00:02:08.370 --> 00:02:13.140
リストにある各要素を
反復しているわけではないためです

00:02:13.140 --> 00:02:15.929
要素の削除についても
ほぼ同じ方法なので

00:02:15.930 --> 00:02:18.180
ここでは実演を省きます

00:02:18.180 --> 00:02:20.970
連結リストの中には
次の要素と前の要素を

00:02:20.970 --> 00:02:25.100
ポイントする双方向連結リストと
呼ばれるものもあります

00:02:25.100 --> 00:02:27.970
双方向連結リストも
ルールは似ていますが

00:02:27.970 --> 00:02:31.770
このリストは双方向に
トラバースする点が独特です

00:02:31.770 --> 00:02:35.700
前述のとおり、要素を追加したり
削除する際に注意が必要となりますが

00:02:35.700 --> 00:02:39.380
これらの操作を配列で行うようりも
簡単なので大変便利と言えるでしょう

