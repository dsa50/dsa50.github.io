WEBVTT
Kind: captions
Language: ja-JP

00:00:00.350 --> 00:00:02.890
配列に対する理解が少し
深まってきたでしょうか

00:00:02.890 --> 00:00:05.689
それでは、別の視点から
考えてみたいと思います

00:00:05.689 --> 00:00:08.750
配列を簡単なものに
例えてみましょう

00:00:08.750 --> 00:00:13.640
配列はインデックスと呼ばれる
アドレスを持った箱の集合体のようなもので

00:00:13.640 --> 00:00:17.980
この鎖はどちらかと言えば連結リストと
呼ばれる構成体に似ています

00:00:17.980 --> 00:00:22.600
連結リストはリストの延長ですが
配列とはまったく違い

00:00:23.900 --> 00:00:27.430
順序を構成していますが
インデックスが存在しません

00:00:27.430 --> 00:00:32.780
むしろ連結リストは
連結によって特徴付けられます

00:00:32.780 --> 00:00:36.770
各要素は次の要素と連結しているため
次の要素が何であるかという概念はあっても

00:00:36.770 --> 00:00:42.350
リストの長さや要素の位置は
考慮しません

00:00:42.350 --> 00:00:43.960
これが配列と異なる点です

00:00:43.960 --> 00:00:47.700
配列には次にどの要素が来るのかを
指定する要素が

00:00:47.700 --> 00:00:48.760
含まれていません

00:00:48.760 --> 00:00:52.420
次の要素は、次のインデックスを
確認することでわかります

00:00:52.420 --> 00:00:55.820
連結リストについて初めて聞いたとき
配列の方がより多くの情報が得られる上に

00:00:55.820 --> 00:00:59.910
次の要素がどこに来るのかも明らかなので
連結リストを使うことなど

00:00:59.910 --> 00:01:02.900
本当にあるのだろうかと
思いました

00:01:02.900 --> 00:01:05.679
しかし、すでに説明したとおり
配列に要素を足したり

00:01:05.680 --> 00:01:09.590
引いたりする作業は
とても複雑になることがあります

00:01:09.590 --> 00:01:12.960
一方、連結リストの場合は
要素の足し引きが

00:01:12.960 --> 00:01:14.949
簡単にできます

00:01:14.950 --> 00:01:17.780
単純に要素を除いたり
追加すればいいだけなのです

00:01:18.800 --> 00:01:21.399
ここで注意点が 1 つありますが
このことについては

00:01:21.400 --> 00:01:22.440
後ほど説明します

