WEBVTT
Kind: captions
Language: ja-JP

00:00:00.210 --> 00:00:03.430
優秀なシステムに判明した
1 つの欠陥

00:00:03.430 --> 00:00:07.330
ハッシュ関数が 2 つの異なる入力に対し

00:00:07.330 --> 00:00:08.870
同じハッシュ値を分割することがあります

00:00:08.870 --> 00:00:10.860
この状況は衝突と呼ばれます

00:00:11.880 --> 00:00:14.900
衝突の修正方法は
主に 2 通りあります

00:00:15.200 --> 00:00:18.700
1 つはハッシュ関数の値を変更するか
またはハッシュ関数を完全に変更して

00:00:18.700 --> 00:00:21.310
可能性のあるすべての値を格納するのに

00:00:21.310 --> 00:00:24.679
十二分な
スロットを確保する方法です

00:00:25.970 --> 00:00:28.790
元のハッシュ関数も維持できますが

00:00:28.790 --> 00:00:31.400
配列のストラクチャーは変化します

00:00:31.400 --> 00:00:33.790
1 つのハッシュ値を
各スロットに格納するのではなく

00:00:33.790 --> 00:00:38.570
そのスポットでハッシュされた
値をすべて含むリストのタイプを格納できます

00:00:38.570 --> 00:00:42.410
このコンテキストでは
このリストは通常バケットと呼ばれます

00:00:42.410 --> 00:00:47.440
各スロットに 1 つの値を格納するのではなく
複数の値やコレクションを各バケットに格納できます

00:00:47.440 --> 00:00:49.989
しかし、これらのアプローチは

00:00:49.990 --> 00:00:52.420
実際役に立つものなのでしょうか

00:00:53.420 --> 00:00:56.760
最初のアプローチでは
一定のルックアップ時間を維持できますが

00:00:56.760 --> 00:00:59.660
より大きい数をハッシュ関数に使うと

00:00:59.660 --> 00:01:03.550
値を格納するための空間が
さらに必要となります

00:01:03.550 --> 00:01:07.539
またこれを反応的に行い
衝突のたびにハッシュ関数の値を変更すると

00:01:07.540 --> 00:01:12.400
新しい配列に全データを移動した際に

00:01:12.400 --> 00:01:16.850
サイズと時間に関する
複雑性が確実に高まります

00:01:16.850 --> 00:01:20.390
バケットアプローチでは
何かを確認するたびに

00:01:20.390 --> 00:01:23.650
短いいくつかのコレクションを
繰り返し処理する必要があります。

00:01:23.650 --> 00:01:28.000
平均ケースではハッシュ関数には
一定のルックアップ時間がありますが

00:01:28.000 --> 00:01:32.790
バケットシステムにより
1 つのバケットにすべての値を格納した状態で

00:01:32.790 --> 00:01:36.640
リストを繰り返し
処理することになります

00:01:36.640 --> 00:01:39.135
最悪のケースでは
これは O(m) になります

00:01:40.360 --> 00:01:42.900
適切に行えば
ハッシュ法は実に迅速で

00:01:42.900 --> 00:01:47.920
時間の大幅な節約につながりますが
こういった大きな懸念も念頭に置く必要があります

00:01:47.920 --> 00:01:51.500
ハッシュ関数の設計に
完璧な方法など存在しません

00:01:51.500 --> 00:01:53.160
これらすべてを考慮した上で
使用するデータと制限に

00:01:53.160 --> 00:01:57.470
最も理にかなったシステムを
構築する必要があります

00:01:57.470 --> 00:02:00.840
値を正しく分散するが
空間をかなり使うハッシュ関数か

00:02:00.840 --> 00:02:06.230
バケットをあまり使用しないが
各バケット内で探索しなければならない可能性がある

00:02:06.230 --> 00:02:08.485
ハッシュ関数のどちらを作成するか
選択しなければならないことがよくあります

00:02:09.610 --> 00:02:13.430
各バケットに 1～3 つの
要素が格納されているのが理想です

00:02:13.430 --> 00:02:15.900
ハッシュ関数を設計する際には
このことを念頭に置いてください

00:02:16.930 --> 00:02:20.850
2 つ目のハッシュ関数を
大きなバケット内で使用し

00:02:20.850 --> 00:02:25.700
これらの要素をさらに分割させるといった
創造的なアプローチを試すこともできます

00:02:25.700 --> 00:02:28.310
このアプローチは特に
十分に分散されたデータがあるが

00:02:28.310 --> 00:02:32.710
非常に大きいバケットがわずかになることが
わかっている場合に特にうまく機能します

00:02:32.710 --> 00:02:37.140
ハッシュ法に関する質問がよく問われますが
これは完璧な解がないことが多いためです

00:02:37.140 --> 00:02:40.290
どんなアプローチを
使用する場合でも

00:02:40.300 --> 00:02:43.670
そのメリット・デメリットについて
説明することが重要です

00:02:43.670 --> 00:02:47.100
ハッシュ関数を最大限に利用し

00:02:47.100 --> 00:02:49.430
面接官にそれをうまく伝えられるよう
最善を尽くしてください

