WEBVTT
Kind: captions
Language: pt-BR

00:00:00.033 --> 00:00:03.301
Acontece que há uma falha
nesse sistema elegante.

00:00:03.335 --> 00:00:07.068
Às vezes, a função hash
retorna o mesmo valor hash

00:00:07.101 --> 00:00:11.568
para duas entradas diferentes,
o que é chamado de colisão.

00:00:11.602 --> 00:00:15.068
Há duas maneiras principais
de consertar uma colisão.

00:00:15.101 --> 00:00:18.335
A 1ª é mudar o valor
na sua função hash

00:00:18.368 --> 00:00:21.001
ou mudar a função hash
totalmente,

00:00:21.034 --> 00:00:25.201
para ter espaço suficiente
para abrigar seus valores potenciais.

00:00:25.235 --> 00:00:28.435
Você também pode manter
a sua função hash original,

00:00:28.468 --> 00:00:30.702
mas mudar a estrutura
do arranjo.

00:00:30.735 --> 00:00:33.668
Em vez de armazenar
um valor hash por bloco,

00:00:33.702 --> 00:00:38.435
armazene uma lista que contenha
todos os valores hash naquele local.

00:00:38.468 --> 00:00:42.001
Essas listas são chamadas
de baldes, neste contexto.

00:00:42.034 --> 00:00:44.968
Em vez de armazenar um valor
em cada bloco,

00:00:45.001 --> 00:00:49.535
armazene vários valores
ou uma coleção em cada balde.

00:00:49.568 --> 00:00:53.034
Mas alguma dessas abordagens
é realmente útil?

00:00:53.068 --> 00:00:56.335
Para a 1ª, você mantém a busca
em tempo constante,

00:00:56.368 --> 00:00:59.535
mas, se usar um número maior
na sua função hash,

00:00:59.568 --> 00:01:03.402
precisará de bem mais espaço
para armazenar seus valores.

00:01:03.435 --> 00:01:08.837
E, se você mudar o valor na função hash
sempre que tiver uma colisão,

00:01:08.870 --> 00:01:11.502
mover os dados
para um novo arranjo

00:01:11.535 --> 00:01:16.468
aumentará a complexidade
em termos de tamanho e tempo.

00:01:16.502 --> 00:01:20.268
Com a abordagem do balde,
você terá que iterar coleções,

00:01:20.301 --> 00:01:23.735
embora menores,
sempre que buscar alguma coisa.

00:01:23.769 --> 00:01:27.769
As funções hash têm busca
em tempo constante no caso médio,

00:01:27.802 --> 00:01:32.668
mas você pode acabar armazenando
os valores em um balde só

00:01:32.702 --> 00:01:36.268
e aí você apenas irá iterar
uma lista.

00:01:36.301 --> 00:01:40.235
Nesse pior caso,
isso se traduz como O(m).

00:01:40.268 --> 00:01:44.535
Quando bem feito, o hashing
é rápido e pode poupar muito tempo,

00:01:44.568 --> 00:01:47.568
mas todas essas coisas
são preocupações reais.

00:01:47.602 --> 00:01:50.901
Não há um jeito perfeito
de criar uma função hash.

00:01:50.934 --> 00:01:52.814
É preciso levar
tudo isso em conta

00:01:52.847 --> 00:01:57.168
e criar um sistema adequado
para seus dados e suas limitações.

00:01:57.201 --> 00:02:00.201
É comum ter que escolher
entre uma função hash

00:02:00.235 --> 00:02:04.001
que espalha bem seus valores,
mas usa muito espaço,

00:02:04.034 --> 00:02:09.368
e uma que usa menos baldes,
mas faz mais buscas dentro deles.

00:02:09.402 --> 00:02:13.301
O ideal é ter de 1 a 3 elementos
armazenados em cada balde,

00:02:13.335 --> 00:02:16.802
então crie funções hash
levando isso em conta.

00:02:16.835 --> 00:02:20.702
Também faça algo criativo,
como usar uma 2ª função hash

00:02:20.735 --> 00:02:24.934
dentro de um balde grande
para dividir ainda mais os elementos.

00:02:24.968 --> 00:02:29.301
Isso funcionaria bem se soubesse
que teria dados bem espalhados,

00:02:29.334 --> 00:02:32.568
mas, no fim, acabaria tendo
alguns baldes bem grandes.

00:02:32.602 --> 00:02:37.001
Questões de hashing são populares,
pois não há uma solução perfeita.

00:02:37.034 --> 00:02:40.869
É esperado que você fale
dos lados bons e ruins

00:02:40.901 --> 00:02:43.335
da abordagem
que você escolher usar.

00:02:43.368 --> 00:02:46.769
Então faça seu melhor
para otimizar sua função hash

00:02:46.802 --> 00:02:49.736
e comunique-se bem
com o entrevistador.

