WEBVTT
Kind: captions
Language: ja-JP

00:00:00.350 --> 00:00:03.740
では、この便利なハッシュ関数は
どのように機能するのでしょうか

00:00:03.740 --> 00:00:07.780
ハッシュ関数の目的は
値を変換して

00:00:07.780 --> 00:00:10.370
保存と取得を容易にすることです

00:00:10.370 --> 00:00:14.759
ある値を与えると
数式に基づいて値を変換し

00:00:14.760 --> 00:00:19.460
コード化されたバージョンとして出力します
これは通常、配列のインデックスです

00:00:19.460 --> 00:00:23.200
このプロセスを明確化するために
例をとって説明しましょう

00:00:23.200 --> 00:00:25.780
ある大きなイベントを企画しているとします

00:00:25.780 --> 00:00:29.200
特定の種類の音楽が
好きな人向けのイベントです

00:00:29.200 --> 00:00:32.820
このイベントに参加したい人は
事前にチケットを購入する必要があります

00:00:32.820 --> 00:00:36.740
すべてのチケットにはランダムに番号が
割り振られており

00:00:36.740 --> 00:00:40.736
チケットにバーコードとして埋め込まれ
参加者は最初にそれを主催者に手渡します

00:00:40.736 --> 00:00:45.560
参加者がチェックインする際に
主催者はすばやく番号を

00:00:45.560 --> 00:00:45.800
確認できなければなりません

00:00:46.950 --> 00:00:50.910
チケット番号を
ハッシュ関数のいずれかに保存できるとしたら

00:00:50.910 --> 00:00:52.379
とても便利です

00:00:52.380 --> 00:00:55.320
すべての番号が手元にあります
これから番号を簡単に保存するために

00:00:55.320 --> 00:00:59.480
ハッシュ関数を見つけて
ハッシュ値を求めなければなりません

00:01:01.200 --> 00:01:05.209
ハッシュ関数のある共通のパターンは
大きな数の最後の数桁をとり

00:01:05.209 --> 00:01:09.300
それを一定の数で除算し
その除算の残りを使って

00:01:09.300 --> 00:01:13.920
配列のどの場所に
その数を配置するかを見つけます

00:01:15.330 --> 00:01:19.179
この場合、余りはそのまま
配列のインデックスになります

00:01:20.300 --> 00:01:22.259
この戦略が機能する理由はなんでしょうか

00:01:22.260 --> 00:01:26.720
チケットに割り当てた番号が
0 から 100 であれば

00:01:26.720 --> 00:01:31.880
配列に格納するのも簡単で
インデックスによって即座に検索できます

00:01:31.880 --> 00:01:35.200
今回の番号のように数字が
大きくランダムである場合

00:01:35.200 --> 00:01:39.340
そうした番号を迅速に配列インデックスに
変換する方法が必要です

00:01:40.670 --> 00:01:43.220
これが一定時間
ルックアップの仕組みです

00:01:43.220 --> 00:01:45.590
ハッシュ関数に番号を渡すと

00:01:45.590 --> 00:01:49.300
関数がハッシュコードを出力し
配列のインデックスに変換されます

00:01:50.150 --> 00:01:54.220
配列に移動して
一定時間で元の値を取得できます

00:01:54.220 --> 00:01:57.390
これは一定時間で
配列のインデックス検索が行われるためです

00:01:58.410 --> 00:02:02.679
大きな数字の最後の数桁を
使用する理由は何でしょうか

00:02:02.680 --> 00:02:06.650
多くの場合、最後の数桁が
もっともランダムだからです

00:02:06.650 --> 00:02:09.590
番号順に数字を
割り当てている場合

00:02:09.590 --> 00:02:12.820
最初の数桁は
あまりランダムにはなりません

00:02:12.820 --> 00:02:16.269
そういう数字はたいてい 1
2、3

00:02:16.270 --> 00:02:20.170
のように始まり
後半が 7、8、9 になります

