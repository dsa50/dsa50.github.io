WEBVTT
Kind: captions
Language: ja-JP

00:00:00.660 --> 00:00:06.720
バブルソート (別名 sinking sort) は
前にも説明したように単純なアプローチです

00:00:06.720 --> 00:00:09.670
配列全体について
隣り合う要素を比較しながら

00:00:09.670 --> 00:00:11.180
必要に応じて交換します

00:00:12.370 --> 00:00:13.989
簡単な例を使って説明しましょう

00:00:15.380 --> 00:00:18.250
まず初めに
最初の 2 つの要素を比較します

00:00:19.430 --> 00:00:22.540
最初の要素が 2 番目の要素より
大きい場合は交換します

00:00:24.100 --> 00:00:25.540
1 つの交換操作が完了しました

00:00:25.540 --> 00:00:29.800
では次の 2 つの要素に
移ります

00:00:29.800 --> 00:00:31.259
ここも同様に
交換が必要です

00:00:31.260 --> 00:00:34.697
できました。では次の 2 つの要素に
移ります

00:00:34.697 --> 00:00:38.910
これも同様に、最初の要素が
2 番目より大きいため

00:00:38.910 --> 00:00:40.900
交換する必要があります

00:00:40.900 --> 00:00:43.410
では配列にある
最後の 2 つの要素を比較します

00:00:43.410 --> 00:00:46.959
これも同様に、最初の要素が
2 番目より大きいため

00:00:46.960 --> 00:00:47.770
交換する必要があります

00:00:48.860 --> 00:00:50.910
できました
このラウンドはこれで完了です

00:00:50.910 --> 00:00:53.400
これでこの配列に対して
1 度ソートを実行しました

00:00:53.400 --> 00:00:56.199
比較が何度必要だったか
数えてみましょう

00:00:56.200 --> 00:00:59.590
5 つの要素があるので
4 回比較を行いました

00:01:00.160 --> 00:01:02.842
つまりこの手順における
ランタイムは

00:01:02.842 --> 00:01:06.660
配列サイズが 5 なので
n-1 回だと言えるでしょう

00:01:06.660 --> 00:01:10.220
n-1 回の比較を使用する場合
何が変わるのでしょうか

00:01:10.220 --> 00:01:14.179
配列はまだソートが完了していませんが
前よりは見栄えが良くなりました

00:01:14.180 --> 00:01:18.540
最大の要素は 8 で
所属する配列の終端に移動しました

00:01:18.540 --> 00:01:21.470
この動きがバブルソートと
呼ばれる理由です

00:01:21.470 --> 00:01:26.700
交換の繰り返しによって配列の最大の要素が
泡のようにトップに上がって行きます

00:01:26.700 --> 00:01:27.830
この論理からすると

00:01:27.830 --> 00:01:32.360
次は数字の 7 が
8 の右側に上がって来なければなりません

00:01:32.360 --> 00:01:34.800
操作を繰り返しましょう

00:01:34.800 --> 00:01:37.940
再びボトムから比較を開始し
トップまで操作を行います

00:01:37.940 --> 00:01:39.789
最初のステップでは
交換が必要なようです

00:01:41.330 --> 00:01:42.920
ではステップ 2 に移ります

00:01:42.920 --> 00:01:46.390
この 2 つの要素は
初めて交換が不要のようです

00:01:46.390 --> 00:01:49.480
実際、最初の要素は
2 番目の要素より小さいので

00:01:49.480 --> 00:01:51.350
何もする必要はありません

00:01:51.350 --> 00:01:53.740
7 と 0 は交換する必要があります

00:01:53.740 --> 00:01:56.630
そして最後の 2 つの要素は順番になっているので
何もする必要がありません

00:01:56.630 --> 00:02:00.570
ここでも 4 ステップ必要でした
つまり n-1 です

00:02:00.570 --> 00:02:03.479
ではさらに 2 ラウンドの
ソートを実行しなければなりません

00:02:03.480 --> 00:02:05.310
ですが詳細は
省きます

00:02:05.310 --> 00:02:08.729
次のソートでの比較の繰り返しが
どのようなものかお見せしましょう

00:02:08.729 --> 00:02:11.590
もう一度ソートを繰り返しましたが
特に変化はありませんでした

00:02:11.590 --> 00:02:15.000
このように 3 と
0 を交換しただけです

00:02:15.000 --> 00:02:19.410
残っている最大の要素 3 は
所定の位置まで上がってきましたが

00:02:19.410 --> 00:02:21.170
まだ操作が必要です

00:02:21.170 --> 00:02:25.220
再度、ここでも 4 ステップ
n-1 ステップを行いました

00:02:25.220 --> 00:02:26.940
あと 1 回ソートを繰り返します

00:02:26.940 --> 00:02:28.720
どのようなものかご覧ください

00:02:28.720 --> 00:02:31.820
今回は 0 と 1 を交換し
すべて完了です

