WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.230
As it turns out, the efficiency of quick sort is actually pretty complicated.

00:00:04.230 --> 00:00:07.214
First, let's just focus on the worst case.

00:00:07.214 --> 00:00:08.685
What would that look like?

00:00:08.685 --> 00:00:12.000
The magic of this algorithm is that it cuts the number of

00:00:12.000 --> 00:00:15.990
comparisons you need to do by splitting the array in half pretty much every time.

00:00:15.990 --> 00:00:19.440
So the worst case for us would be if we couldn't

00:00:19.440 --> 00:00:23.355
split the array in half and had to do all of the comparisons every time.

00:00:23.355 --> 00:00:26.039
You'll end up doing all of the comparisons if

00:00:26.039 --> 00:00:28.875
the pivots are actually already in the right place.

00:00:28.875 --> 00:00:31.800
Since 13 is already the biggest element,

00:00:31.800 --> 00:00:34.350
will end up comparing it to everything else on the first

00:00:34.350 --> 00:00:37.204
go and realizing that it doesn't need to move.

00:00:37.204 --> 00:00:40.070
This is a lot of comparisons to do at once.

00:00:40.070 --> 00:00:44.450
But the real problem happens when the next value is also the largest.

00:00:44.450 --> 00:00:49.090
Again we end up comparing to everything smaller than it and we're not saving any steps.

00:00:49.090 --> 00:00:52.700
Hopefully, the number of comparisons here reminds you of bubble sort.

00:00:52.700 --> 00:00:54.065
Remember in bubble sort,

00:00:54.064 --> 00:00:57.259
we would have to compare each element to the one next to it,

00:00:57.259 --> 00:00:59.604
again and again, and again and again.

00:00:59.604 --> 00:01:02.149
Eventually, we can leave off the ones that were

00:01:02.149 --> 00:01:04.685
at the end because we knew they were in the right place.

00:01:04.685 --> 00:01:07.640
The worst case of quick sort is exactly the same.

00:01:07.640 --> 00:01:13.344
Which means that the worst case of quick sort is actually big O of n squared.

00:01:13.344 --> 00:01:15.000
For something called quick sort,

00:01:15.000 --> 00:01:17.204
that's a really terrible efficiency.

00:01:17.204 --> 00:01:20.829
However, quick sort is useful for two main reasons.

00:01:20.829 --> 00:01:27.614
First of all, the average in best-case complexity are actually n log n. In a good case,

00:01:27.614 --> 00:01:29.739
the pivot will move down to the middle and we'll

00:01:29.739 --> 00:01:32.274
get to divide the array in half every time.

00:01:32.275 --> 00:01:34.480
With our pivot in the middle,

00:01:34.480 --> 00:01:38.734
we can look at the other halves of the array and move their pivots to the middle to.

00:01:38.734 --> 00:01:40.670
Since these pivots are sorted,

00:01:40.670 --> 00:01:42.850
we know that everything else is sorted.

00:01:42.849 --> 00:01:45.265
So we're done really quickly.

00:01:45.265 --> 00:01:48.265
Here if because we're cutting the array in half every time,

00:01:48.265 --> 00:01:50.465
it'll end up looking a lot like merge sort.

00:01:50.465 --> 00:01:53.620
So again that's why our efficiency is n log

00:01:53.620 --> 00:01:56.905
n. The average case is actually going to look a lot like this.

00:01:56.905 --> 00:01:58.150
Will pick a random number,

00:01:58.150 --> 00:02:01.530
it'll move close to the middle and so on.

00:02:01.530 --> 00:02:05.254
However, if we know we're going to be getting arrays that are near sorted,

00:02:05.254 --> 00:02:06.814
we don't want to use quick sort.

00:02:06.814 --> 00:02:10.129
Since that'll end up being the worst case every time.

00:02:10.129 --> 00:02:11.810
The second point is that you can do

00:02:11.810 --> 00:02:15.245
some optimizations with quick sort that'll make it run faster.

00:02:15.245 --> 00:02:18.085
For example, when you split your array,

00:02:18.085 --> 00:02:22.460
you can configure your program such that it runs both halves at the same time.

00:02:22.460 --> 00:02:26.659
It will end up using the same amount of computing power but it will eat up less time.

00:02:26.659 --> 00:02:30.020
Also rather than selecting the last element as the pivot,

00:02:30.020 --> 00:02:34.120
you could look at the last few elements and select the median of them as the pivot.

00:02:34.120 --> 00:02:35.810
Selecting the median will give you

00:02:35.810 --> 00:02:38.740
a better sense of what's in the middle of the array overall,

00:02:38.740 --> 00:02:40.760
so you have a better chance of moving

00:02:40.759 --> 00:02:44.215
your element in the middle and having that best case scenario.

00:02:44.215 --> 00:02:47.025
Also, this version of quick sort is in place,

00:02:47.025 --> 00:02:49.355
so we aren't using any extra space.

00:02:49.354 --> 00:02:52.539
Our space complexity is constant.

