WEBVTT
Kind: captions
Language: ja-JP

00:00:00.520 --> 00:00:02.940
次のテーマはソートアルゴリズムです

00:00:02.940 --> 00:00:06.200
リストに含まれる各要素を
チェックするだけの

00:00:06.200 --> 00:00:07.600
探索アルゴリズムとは異なり

00:00:08.850 --> 00:00:12.590
ソートアルゴリズムでは
配列に含まれる要素の順序を

00:00:12.590 --> 00:00:13.120
変更します

00:00:14.240 --> 00:00:17.570
これらの縫いぐるみを
身長順に並べ替えたいと思います

00:00:17.570 --> 00:00:20.100
まず、ここで決めなければならないのは

00:00:20.100 --> 00:00:24.600
一番低いものを先頭に配置するか
それとも最後に配置するか

00:00:24.600 --> 00:00:26.900
そして、どのようなアルゴリズムを使うかです

00:00:27.360 --> 00:00:30.450
1 つの縫いぐるみを他の
縫いぐるみと 1 つずつ比較して

00:00:30.450 --> 00:00:32.820
並べることもできます

00:00:32.820 --> 00:00:36.200
高度なトリックやアルゴリズムを
使用しないこの手法は

00:00:36.200 --> 00:00:37.500
ナイーブアプローチと呼ばれています

00:00:38.650 --> 00:00:42.570
新たな問題に直面したとき
よく最初に思いつくのが

00:00:42.570 --> 00:00:43.160
このナイーブアプローチです

00:00:44.420 --> 00:00:48.520
ナイーブアプローチは
簡単に展開を予測できますが

00:00:48.520 --> 00:00:51.710
もっと効率的な方法が
あるはずです

00:00:52.750 --> 00:00:55.350
ソートは少し変わっており

00:00:55.350 --> 00:00:58.500
ここで扱う典型的なソートアルゴリズムの
どれかを使って解けない

00:00:58.500 --> 00:01:00.360
問題を出されることは
滅多にありません

00:01:01.790 --> 00:01:05.310
面接に関して言えば
ソートアルゴリズムの仕組みを理解し

00:01:05.310 --> 00:01:08.420
このアルゴリズムの
実行時間を暗記しておけば

00:01:08.420 --> 00:01:11.200
計算量問題をごく短時間で
解くことが可能になります

00:01:12.400 --> 00:01:15.200
最後に考慮しておくべきことは
ソートアルゴリズムが

00:01:15.200 --> 00:01:17.400
使われているかどうかです

00:01:18.200 --> 00:01:21.130
In-place ソートアルゴリズムでは
すべての要素を新たなデータ構造に

00:01:21.130 --> 00:01:24.640
コピーしなくても
すでにあるデータ構造で

00:01:24.640 --> 00:01:26.430
要素を並べ替えるだけで対処できます

00:01:27.430 --> 00:01:29.990
また、データ構造を
再構築する必要がないため

00:01:29.990 --> 00:01:31.979
空間計算量も
少ないのが特徴です

00:01:33.390 --> 00:01:37.190
使用する空間や時間を
抑えることには

00:01:37.190 --> 00:01:37.920
それなりのデメリットもあります

00:01:39.600 --> 00:01:42.900
10 個の数字からなる配列では
それほど問題になりませんが

00:01:42.900 --> 00:01:46.400
データポイントが数百万や数十億ある場合
大きな違いが生じます

00:01:47.800 --> 00:01:49.660
面接ではこのことを
言及しておくとよいかもしれません

00:01:49.660 --> 00:01:53.840
どの方法を採用するにせよ
その方法を選んだ理由を述べることが重要です

00:01:53.840 --> 00:01:56.880
理由が多ければ多いほど
優秀な人材という印象を与えられるでしょう

